<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Visualization | SERDAR KORUR</title>
    <link>/tags/data-visualization/</link>
      <atom:link href="/tags/data-visualization/index.xml" rel="self" type="application/rss+xml" />
    <description>Data Visualization</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Wed, 16 Oct 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/logo.png</url>
      <title>Data Visualization</title>
      <link>/tags/data-visualization/</link>
    </image>
    
    <item>
      <title>Add custom summary statistics in ggplot2</title>
      <link>/r/stats-ggplot/</link>
      <pubDate>Wed, 16 Oct 2019 00:00:00 +0000</pubDate>
      <guid>/r/stats-ggplot/</guid>
      <description>


&lt;p&gt;It is hard to understand your data by looking at the numbers on a csv file. You need to plot it. And adding statistics to your plots will make it more informative.&lt;/p&gt;
&lt;p&gt;To evaluate data, we typically use &lt;strong&gt;mean&lt;/strong&gt; and &lt;strong&gt;median&lt;/strong&gt; to define its central tendency and &lt;strong&gt;range, quartiles, variance&lt;/strong&gt; and &lt;strong&gt;standard deviation&lt;/strong&gt; to define how spread it is.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mean&lt;/strong&gt; and &lt;strong&gt;standard deviation&lt;/strong&gt; is a good representation of the data if we don’t have extreme values that result in a skewed distribution. But, if we have outliers they might misguide us. In those conditions, &lt;code&gt;median&lt;/code&gt; and &lt;code&gt;quartiles&lt;/code&gt; will serve us better.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Median&lt;/strong&gt; is the central point which divides the data into half. &lt;strong&gt;Quartiles&lt;/strong&gt; are used to describe the spread of the data. The word comes from the Medieval Latin “quartilis” which means fourth and &lt;strong&gt;quartiles break the data into four equal parts&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The advantage is that they are much less effected by the outliers or skeweness of the data.
  &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;For this reason, &lt;strong&gt;quartiles are often used along with the median as the best measures of spread.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;They are often expressed as an &lt;strong&gt;Interquartile range (IQR)&lt;/strong&gt;, which is the interval between first and third quartiles and represents 50% of the data points.&lt;/p&gt;
&lt;p&gt;For example, you measured height of adults in a population, with Interquartile range you can describe a discrete interval centered around the median including 50% of the measurements.&lt;/p&gt;
&lt;p&gt;Here is a representative graph.&lt;img src=&#34;/img/quartiles.png&#34; alt=&#34;graph:wikipedia&#34; /&gt;[source:wikipedia]&lt;/p&gt;
&lt;div id=&#34;how-to-include-statistics-in-ggplot2&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;How to include statistics in ggplot2&lt;/h1&gt;
&lt;p&gt;Stats make it easier to grasp the data. And &lt;strong&gt;different statistics are suited for different data types&lt;/strong&gt;. For example, you may want to show &lt;code&gt;a 95% confidence interval? or mean? median?&lt;/code&gt; or any other statistics which captures the details best for your data.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So let’s go through on an example data&lt;/strong&gt; to understand how statistics can be overlayed in ggplot2. The data is about the effects of two Herbicides (glyphosate &amp;amp; bentazone) on the yield of white mustard (Sinapis alba) seeds.&lt;/p&gt;
&lt;p&gt;First, import ggplot2 package and read in the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
path &amp;lt;- &amp;quot;C:/Users/serda/Downloads/S.alba.csv&amp;quot;
data &amp;lt;- read.csv(path)
str(data)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    68 obs. of  4 variables:
##  $ X        : int  1 2 3 4 5 6 7 8 9 10 ...
##  $ Dose     : int  0 0 0 0 0 0 0 0 10 10 ...
##  $ Herbicide: Factor w/ 2 levels &amp;quot;Bentazone&amp;quot;,&amp;quot;Glyphosate&amp;quot;: 2 2 2 2 2 2 2 2 2 2 ...
##  $ DryMatter: num  4.7 4.6 4.1 4.4 3.2 3 3.8 3.9 3.8 3.8 ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These chemicals used at 8 different doses and the yield is measured. I will convert the dose variable as a factor.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data$Dose &amp;lt;- as.factor(data$Dose)
levels(data$Dose)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;0&amp;quot;   &amp;quot;10&amp;quot;  &amp;quot;20&amp;quot;  &amp;quot;40&amp;quot;  &amp;quot;80&amp;quot;  &amp;quot;160&amp;quot; &amp;quot;320&amp;quot; &amp;quot;640&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can make an initial plot to visualize the data. We’ll plot the yield variable &lt;code&gt;DryMatter&lt;/code&gt; against &lt;code&gt;Dose&lt;/code&gt; of the Herbicides. We can assign &lt;code&gt;col&lt;/code&gt; argument to map different chemical compounds to different colors.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# I will define a dodge and jitterdodge object to avoid overlapping data points 
# or stats that we will overlay later
posn.d &amp;lt;- position_dodge(width=0.2)
posn.jd &amp;lt;- position_jitterdodge(jitter.width = 0.1, dodge.width=0.2)
p &amp;lt;- ggplot(data, aes(x=Dose, y=DryMatter, col=Herbicide, fill=Herbicide, 
                      group=Herbicide ))
p + geom_point(position =posn.jd)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-16-add-custom-summary-statistics-into-your-ggplot_files/figure-html/visualize%20the%20data-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;What we see here is that, at low doses both Herbicides led similar yields but starting from Dose 40 we see a drastic negative impact of Benzoate on yield.&lt;/p&gt;
&lt;p&gt;On top of that plot, I want to overlay the &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt; and also &lt;code&gt;median&lt;/code&gt; and &lt;code&gt;Interquartile range&lt;/code&gt; for each set of yield measurements.&lt;/p&gt;
&lt;p&gt;There are many default functions in ggplot2 which can be used directly such as &lt;strong&gt;mean_sdl(), mean_cl_normal()&lt;/strong&gt; to add stats in stat_summary() layer. But, I will create custom functions here so that we can grasp better what is happening behind the scenes on ggplot2.&lt;/p&gt;
&lt;p&gt;I will create one function to calculate the &lt;strong&gt;median&lt;/strong&gt; and the &lt;strong&gt;interquartile range(IQR) 1-3&lt;/strong&gt;, and another to calculate min(), max() values.&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    In order to use the results of a function directly in ggplot2 we need to &lt;strong&gt;ensure that the names of the variables match the aesthetics needed for our respective geoms&lt;/strong&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Function for median and IQR

median_IQR &amp;lt;- function(x) {
  data.frame(y = median(x), # Median
             ymin = quantile(x)[2], # 1st quartile
             ymax = quantile(x)[4])  # 3rd quartile
}

# Function for min, max values
range &amp;lt;- function(x) {
  data.frame(ymin=min(x),
             ymax=max(x))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s replot with the statistics we wanted to overlay. You can use two &lt;code&gt;stat_summary()&lt;/code&gt; layers to add our stats. You can set the &lt;code&gt;fun.data&lt;/code&gt; argument to the specific function defined above.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Updated plot
p + stat_summary(geom = &amp;quot;linerange&amp;quot;, fun.data = median_IQR, position = posn.d, size=3) + 
  stat_summary(geom = &amp;quot;linerange&amp;quot;, fun.data = range, position = posn.d, size=3, alpha=0.5)+ 
  stat_summary(geom = &amp;quot;point&amp;quot;, fun.y = &amp;quot;median&amp;quot;, position = posn.d, size = 3, 
               col = &amp;quot;black&amp;quot;, shape = &amp;quot;X&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-16-add-custom-summary-statistics-into-your-ggplot_files/figure-html/visualize%20with%20stats-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In contrast, to the first plot here we easily see where the median and IQR lays. We can make our comparisions easier. Starting from dose 20, we see that glyphosate clearly outperforms bentazone. Big separation between the IQRs are obvious at doses 40 and 80. At higher doses, differences in IQRs starts to disappear.&lt;/p&gt;
&lt;div id=&#34;conclusions&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Conclusions&lt;/h3&gt;
&lt;p&gt;Ggplot2 is a flexible package and knowing its intricacies will help you level up your visuals. To understand your data and to convey the insights you want to point out, you can include your choice of custom functions in ggplot &lt;code&gt;stat_summary()&lt;/code&gt; layer similarly as we did above or use the default functions.&lt;/p&gt;
&lt;p&gt;The data we have here was small. With bigger data, it is more crucial to overlay summary statistics of interest for effective visuals.&lt;/p&gt;
&lt;p&gt;Until next time!&lt;/p&gt;
&lt;p&gt;Serdar&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>What is aesthetics and attributes in ggplot&#39;s world?</title>
      <link>/r/ggplot-shiny-app/</link>
      <pubDate>Tue, 08 Oct 2019 00:00:00 +0000</pubDate>
      <guid>/r/ggplot-shiny-app/</guid>
      <description>


&lt;p&gt;ggplot2 is a powerful data visualization tool of R. Make quick visualizations to explore or share your insights.&lt;/p&gt;
&lt;p&gt;Learning how aesthetics and attributes are defined in ggplot will give you an edge to develop your skills quickly.&lt;/p&gt;
&lt;div id=&#34;ggplot2-tips-distinction-between-aesthetics-and-attributes&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;ggplot2 tips: distinction between aesthetics and attributes&lt;/h3&gt;
&lt;p&gt;Aesthetics are defined inside &lt;strong&gt;aes()&lt;/strong&gt; in ggplot syntax and attributes are outside the aes().&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;e.g. ggplot(data, aes(x, y, &lt;strong&gt;color=var1&lt;/strong&gt;) + geom_point&lt;strong&gt;(size=6)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We typically understand &lt;strong&gt;aesthetics&lt;/strong&gt; as how something looks, color, size etc.&lt;br /&gt;
But in ggplot’s world how things look is just an &lt;strong&gt;attribute.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Aesthetics does not refer how something looks, &lt;strong&gt;but to which variable is mapped onto it.&lt;/strong&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;I will create an imaginary data frame to apply those concepts.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
points &amp;lt;- 500
# Defining the Golden Angle
angle &amp;lt;- pi*(3-sqrt(5))
t &amp;lt;- (1:points) * angle
x &amp;lt;- sin(t/2)
y &amp;lt;-cos(t/2)
z &amp;lt;- rep(c(1,2,3,4,5,6,7,8,9,10), times=50)
w &amp;lt;- rep(c(1,2), times=250)
df &amp;lt;- data.frame(t, x, y, z, w)
# Have a look at the data
head(df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           t          x           y z w
## 1  2.399963  0.9320324  0.36237489 1 1
## 2  4.799926  0.6754903 -0.73736888 2 2
## 3  7.199890 -0.4424710 -0.89678282 3 1
## 4  9.599853 -0.9961710  0.08742572 4 2
## 5 11.999816 -0.2795038  0.96014460 5 1
## 6 14.399779  0.7936008  0.60843886 6 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The dataframe we created has 3 numeric (t, x, y) variables and 2 discrete variables (z, w). With ggplot2 I can map any of the variables on my plot by defining them inside the &lt;strong&gt;aes().&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Make a scatter plot of points of a spiral
p &amp;lt;- ggplot(df, aes(x*t, y*t))
p + geom_point()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-08-what-is-aesthetics-and-atributes-in-ggplot-s-world_files/figure-html/ggplot%20main%20spiral-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;example-use-of-an-aesthetics&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Example use of an aesthetics&lt;/h3&gt;
&lt;p&gt;By defining col=factor(z) inside aes(), I can map z to colors. So now the graph shows x, y and also values z.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Make a scatter plot of points in a spiral
p &amp;lt;- ggplot(df, aes(x*t, y*t, col=factor(z)))
p + geom_point()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-08-what-is-aesthetics-and-atributes-in-ggplot-s-world_files/figure-html/Map%20z%20on%20color-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Each different color now represents different values of z.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;example-use-of-an-attribute&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Example use of an attribute&lt;/h3&gt;
&lt;p&gt;Attribute is how somethings looks. e.g. you can the points bigger by defining size=4. But it does not give any extra information about data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Make a scatter plot of points in a spiral
p &amp;lt;- ggplot(df, aes(x*t, y*t, col=factor(z)))
p + geom_point(size = 4)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-08-what-is-aesthetics-and-atributes-in-ggplot-s-world_files/figure-html/main%20spiral%20colored-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;use-shape-as-an-attribute&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Use shape as an attribute&lt;/h3&gt;
&lt;p&gt;Same goes here. I am changing how something looks like. The data point shape change to 24 which defines a filled triangle. But nothing is mapped onto it. It is just an attribute.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Make a scatter plot of points in a spiral
p &amp;lt;- ggplot(df, aes(x*t, y*t, color=factor(z)))
p + geom_point(shape=24, size=4)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-08-what-is-aesthetics-and-atributes-in-ggplot-s-world_files/figure-html/spiral%20colors%20with%20triangles-1.png&#34; width=&#34;672&#34; /&gt;
Here, x&lt;em&gt;t, y&lt;/em&gt;t and factor(z) is mapped on to our graph.
### Using shape as an aesthetics&lt;/p&gt;
&lt;p&gt;By defining shape and color inside aes() I can map w and z to my plot as well.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;points &amp;lt;- 500
# Defining the Golden Angle
angle &amp;lt;- pi*(3-sqrt(5))
t &amp;lt;- (1:points) * angle
x &amp;lt;- sin(t)
y &amp;lt;-cos(t)
z &amp;lt;- rep(c(1,2,3,4,5,6,7,8,9,10), times=50)
w &amp;lt;- rep(c(1,2), times=250)
df &amp;lt;- data.frame(t, x, y, z, w)

p &amp;lt;- ggplot(df, aes(x*t, y*t, shape=factor(w), color=factor(z)))
p + geom_point(size=3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-08-what-is-aesthetics-and-atributes-in-ggplot-s-world_files/figure-html/aa-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Spirals look nice and we got some basics of ggplot. Now let’s use it to create a pattern designer, with Shiny. Many patterns in Nature can be explained by mathematical terms, Shapes of sunflowers, dandelions or snowflakes etc.&lt;/p&gt;
&lt;p&gt;I will tell the rest of the story in the next update. Now you can play with the app to create your patterns!&lt;/p&gt;
&lt;iframe width=&#34;1000&#34; height=&#34;800&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; src=&#34;https://korur.shinyapps.io/designapattern/&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;Until next time!&lt;br /&gt;
Serdar&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
