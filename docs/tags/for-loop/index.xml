<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>For loop | SERDAR KORUR</title>
    <link>/tags/for-loop/</link>
      <atom:link href="/tags/for-loop/index.xml" rel="self" type="application/rss+xml" />
    <description>For loop</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Fri, 15 Nov 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/logo.png</url>
      <title>For loop</title>
      <link>/tags/for-loop/</link>
    </image>
    
    <item>
      <title>Speed boosting in R: Writing efficient code &amp; parallel programming</title>
      <link>/r/speed-boosting-in-r-writing-efficient-code-parallel-programming/</link>
      <pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/r/speed-boosting-in-r-writing-efficient-code-parallel-programming/</guid>
      <description>


&lt;div id=&#34;have-more-things-happen-at-once-parallel-programming&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Have more things happen at once: Parallel Programming&lt;/h2&gt;
&lt;p&gt;Parallel processing is about &lt;strong&gt;using multiple cores of your computer’s CPU&lt;/strong&gt; to run multiple tasks simultaneously. This enables you to complete &lt;strong&gt;the same task multiple times quicker!&lt;/strong&gt;&lt;img src=&#34;/img/veri-ivanova-unsplash.jpg&#34; alt=&#34;Photo by Veri Ivanova on Unsplash&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In R, usually computations run sequentially. When we initiate multiple tasks they are performed one after the other, new task starts only after the previous one is completed.&lt;/p&gt;
&lt;p&gt;This might become the bottleneck when you come across a computationally heavy process. Such as running monte carlo simulations or fitting multiple machine learning models.&lt;strong&gt;Typically, if I have a process which runs longer than 3 minutes, I consider using parallel processing.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It might sound complicated but parallel computing is simple. When you have a repetitive task which takes too much of your valuable time why not implement it and &lt;strong&gt;save time?&lt;/strong&gt; Even if you have a single task, you can benefit from parallel processing by &lt;strong&gt;dividing the task into smaller pieces.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Two widely used packages for parallel processing are &lt;a href=&#34;https://stat.ethz.ch/R-manual/R-devel/library/parallel/doc/parallel.pdf&#34;&gt;parallel&lt;/a&gt; and &lt;a href=&#34;foreach%20cran%20page&#34;&gt;foreach&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let’s do some parallel processing..&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;what-is-our-goal&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What is our goal?&lt;/h2&gt;
&lt;p&gt;I recently analyzed data from horror movies released in the world between 2012 and 2017. What caught my attention was that movies are more likely to be released at the 13th of each month. You can visit my recent &lt;a href=&#34;https://dataatomic.com/r/probability-distributions/&#34;&gt;post&lt;/a&gt; if you want to know more about this data.&lt;/p&gt;
&lt;div id=&#34;lets-get-the-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Let’s get the data&lt;/h3&gt;
&lt;p&gt;There are 2782 movies released in one of the 30 days (categories). The resulting table below shows the days of the month and how many movies released at that day.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse) # ggplot2, dplyr, tidyr, readr, 
                   # purrr, tibble, stringr, forcats&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;horror_movies &amp;lt;- readr::read_csv(&amp;quot;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-10-22/horror_movies.csv&amp;quot;)

dim(horror_movies)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3328   12&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;horror_date &amp;lt;-  horror_movies %&amp;gt;% 
                separate(
                  release_date, 
                  c(&amp;quot;day&amp;quot;, &amp;quot;month&amp;quot;, &amp;quot;year&amp;quot;),
                  sep = &amp;quot;-&amp;quot;)

horror_date$day &amp;lt;- as.numeric(horror_date$day)

# Remove rows without Date of the month

horror_date &amp;lt;- horror_date %&amp;gt;% filter(day &amp;lt; 32) 

# I am excluding Day 1 from the analysis (Most aggreements starts at 1st)

horror_date_table &amp;lt;- horror_date %&amp;gt;% filter(day &amp;gt; 1)

# let&amp;#39;s check what is the most common day in the month for a horror movie release
data &amp;lt;-  horror_date_table %&amp;gt;%
  group_by(day) %&amp;gt;% 
  count() %&amp;gt;% 
  arrange(desc(n))

data %&amp;gt;% print(n=30)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 30 x 2
## # Groups:   day [30]
##      day     n
##    &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;
##  1    13   124
##  2    18   119
##  3    25   119
##  4    21   110
##  5    31   107
##  6    28   102
##  7    10   100
##  8    20   100
##  9     5    99
## 10     7    98
## 11     2    95
## 12    29    94
## 13    14    91
## 14    12    90
## 15    24    90
## 16     8    88
## 17    15    88
## 18    17    88
## 19    16    87
## 20     3    86
## 21     4    86
## 22     6    86
## 23     9    85
## 24    22    85
## 25    26    84
## 26    11    83
## 27    27    82
## 28    19    77
## 29    30    74
## 30    23    65&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I will simulate 1 million multinomial trials of distributing 2782 movies to 30 days of the month. This type of distributions (k &amp;gt; 2) are called &lt;strong&gt;multinomial distributions.&lt;/strong&gt;xx`&lt;/p&gt;
&lt;p&gt;I created a function to find p values for each day. But it takes sometime to run. I will try to improve the runtime by &lt;strong&gt;optimizing my code&lt;/strong&gt; and &lt;strong&gt;using parallel processing.&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;multfun &amp;lt;- function(x){ 
  a &amp;lt;- list()
  avc &amp;lt;- rmultinom(1000000, size=2782, prob=rep(1/30, 30))  # Create probability matrix
  for (i in 1:30){ a[[i]] &amp;lt;- mean(avc[i,1:1000000] &amp;gt;=x) }   # Find probabilities for each day
  ifelse(do.call(sum,a)/30 &amp;lt;= 0.5, p_val &amp;lt;-  2 * do.call(sum,a)/30, 
                                   p_val &amp;lt;- 2*(1 - do.call(sum,a)/30))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;multfun() uses rmultinom() function to produce a matrix of monte carlo simulations of 1.000.000 random multinomial distributions with 30 categories. Then calculates total probabilities of any given observation or rarer events at each day from this matrix.&lt;/p&gt;
&lt;p&gt;This actually translates into the p value for a given (n) observation.
For example, when I run multfun(124), It will give me the p value for observing a day with at least 124 movie releases.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Run an example
multfun(124)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.001844267&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To calculate the p values for the top 5 days with highest number of movie releases, I can run multfun() multiple times for each value.&lt;/p&gt;
&lt;div id=&#34;execute-the-multfun-function-multiple-times&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Execute the multfun() function multiple times&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;system.time({
multfun(124)
multfun(119)
multfun(110)
multfun(107)
multfun(102)
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    user  system elapsed 
##   15.72    0.21   15.94&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For few values it can be ok, but easier methods exist if you need to run your function repetitvely for a bigger number of inputs.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;using-lapply-function&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Using lapply() function&lt;/h4&gt;
&lt;p&gt;Instead of running a function for different input values several times, you can use lapply() function. &lt;strong&gt;It loops over a given vector or list input (l in lapply comes from list), and applies the input function to each element in that list.&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;system.time({
lapply(c(124,119,119,197,102), multfun)
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    user  system elapsed 
##   15.64    0.29   15.92&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;using-parallel-package-functions-parlapply&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Using parallel package functions: parLapply()&lt;/h2&gt;
&lt;p&gt;If you have ever used any of lapply() or sapply function you are halfway in parallel processing.&lt;/p&gt;
&lt;div id=&#34;preparation-for-parallel-processing&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Preparation for parallel processing&lt;/h3&gt;
&lt;p&gt;You can use &lt;strong&gt;detectCores()&lt;/strong&gt; function to find out how many cores are available in your CPU.&lt;/p&gt;
&lt;p&gt;Then, to create the clusters required apply &lt;strong&gt;makeCluster()&lt;/strong&gt; with the number of cores you intend to use. In my computer, I have 6 cores and I will assign 5 cores as the multiple workers.&lt;/p&gt;
&lt;div id=&#34;parallel-processing-parlapply&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Parallel processing: parLapply&lt;/h4&gt;
&lt;p&gt;parLapply is the easiest way to parallelise computation. You first need to replace lapply with parLapply and enter an extra cluster argument.&lt;/p&gt;
&lt;p&gt;Then, an additional preparation step to create the clusters required. &lt;strong&gt;makeCluster()&lt;/strong&gt; function creates the number of cluster that you intend to use. In my computer, I have 6 cores and I will assign 5 cores as the multiple workers.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(parallel)
system.time({
n_cores &amp;lt;- detectCores(logical=FALSE)
cl &amp;lt;- makeCluster(n_cores-1)
parLapply(cl , c(124,119,119,197,102), multfun)
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    user  system elapsed 
##    0.02    0.01    4.54&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stopCluster(cl)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When done, include stopCluster() argument to avoid running R sessions in different clusters in the background.&lt;/p&gt;
&lt;p&gt;Theoretically, I can expect 5X quicker processing with 5 cores. But there are overhead costs. Additional preparation steps such as makecluster() function also takes time.&lt;/p&gt;
&lt;p&gt;We had much quicker execution by parallel processing. Is there a room for further improvement?&lt;/p&gt;
&lt;p&gt;Let’s look at our multfun function again…&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;multfun &amp;lt;- function(x){ 
  a &amp;lt;- list()
  avc &amp;lt;- rmultinom(1000000, size=2782, prob=rep(1/30, 30))  # Create probability matrix
  for (i in 1:30){ a[[i]] &amp;lt;- mean(avc[i,1:1000000] &amp;gt;=x) }   # Find probabilities for each day
  ifelse(do.call(sum,a)/30 &amp;lt;= 0.5, p_val &amp;lt;-  2 * do.call(sum,a)/30, 
                                   p_val &amp;lt;- 2*(1 - do.call(sum,a)/30))
                       }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In R, it is possible to do things in multiple ways. Sometimes we need more readable version and sometimes just fast code. I see that multfun uses a list and a for loop. If I find a way without using them I can get a faster run.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;improved-multfun-define-the-function-without-using-a-loop-and-list&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Improved multfun: Define the function without using a loop and list&lt;/h2&gt;
&lt;p&gt;Mean function in R can be vectorized instead of looping.&lt;/p&gt;
&lt;p&gt;I can achieve the same result what the first multfun() was doing by including what for loop was doing inside the “[ ]”. Mean function will be applied find the total proportion of values equal or bigger than &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;multfun_opt &amp;lt;- function(x){ 
  avc &amp;lt;- rmultinom(1000000, size=2782, rep(1/30, 30))
  p &amp;lt;- mean(avc[1:30, 1:1000000] &amp;gt;=x)
  ifelse(p &amp;lt;= 0.5, p_val &amp;lt;-  2 * p, p_val &amp;lt;- 2*(1 - p))}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s check whether improved multfun is faster.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;system.time({
n_cores &amp;lt;- detectCores(logical=FALSE)
cl &amp;lt;- makeCluster(n_cores-1)
parLapply(cl , c(124,119,119,197,102), multfun_opt)
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    user  system elapsed 
##    0.00    0.06    4.32&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stopCluster(cl)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since rmultinom is the bottleneck here, we did not see very big improvement in overall function. We got 10-20% improvement. But it is good to know, what we can improve when we really need it.&lt;/p&gt;
&lt;p&gt;Let’s compare only the part of the function which uses the vectorized operation and the one with for loop.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;avc &amp;lt;- rmultinom(1000000, size=2782, prob=rep(1/30, 30)) 
a &amp;lt;- list()

system.time({
  for (i in 1:30){ a[[i]] &amp;lt;- mean(avc[i,1:1000000] &amp;gt;=124) }  
  ifelse(do.call(sum,a)/30 &amp;lt;= 0.5, p_val &amp;lt;-  2 * do.call(sum,a)/30, 
                                   p_val &amp;lt;- 2*(1 - do.call(sum,a)/30)) })&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    user  system elapsed 
##    0.41    0.01    0.42&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;system.time({
    p &amp;lt;- mean(avc[1:30, 1:1000000] &amp;gt;=124)
  ifelse(p &amp;lt;= 0.5, p_val &amp;lt;-  2 * p, p_val &amp;lt;- 2*(1 - p)) })&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    user  system elapsed 
##    0.22    0.02    0.24&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vectorised version is twice faster!!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;further-improvement&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Further Improvement&lt;/h2&gt;
&lt;p&gt;You can use Rprof() function to profile your process, it will return how much time each subprocess takes time.
Let’s profile our function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;multfun_opt &amp;lt;- function(x){ 
  avc &amp;lt;- rmultinom(1000000, size=2782, rep(1/30, 30))
  p &amp;lt;- mean(avc[1:30, 1:1000000] &amp;gt;=x)
  ifelse(p &amp;lt;= 0.5, p_val &amp;lt;-  2 * p, p_val &amp;lt;- 2*(1 - p))
  }

Rprof()
multfun_opt(124)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.0018542&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Rprof(NULL)

summaryRprof()$by.self&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                self.time self.pct total.time total.pct
## &amp;quot;rmultinom&amp;quot;         1.80    93.75       1.80     93.75
## &amp;quot;&amp;gt;=&amp;quot;                0.08     4.17       0.08      4.17
## &amp;quot;mean&amp;quot;              0.02     1.04       0.12      6.25
## &amp;quot;mean.default&amp;quot;      0.02     1.04       0.02      1.04&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In profile summary, &lt;strong&gt;total.pct&lt;/strong&gt; shows the total percentage of the duration of each task inside the function. We can see that &lt;strong&gt;rmultinom()&lt;/strong&gt; part of takes more than 90% of the processing time.&lt;/p&gt;
&lt;p&gt;If we are looking further improvement we can focus on it. To improve rmultinom() part, I will isolate it by splitting the multfun into two functions.&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    In general, to be able to apply parallel processing we need to be able to dispatch our tasks as functions, with one task going to each processor. We can apply parLapply to execute multiple functions at the same time.
  &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Above, first improvement was using parLapply instead of lapply and second replacing a loop with a faster vectorized operation. Now, we will utilize another approach, dividing a task into smaller pieces.&lt;/p&gt;
&lt;p&gt;I need to create a new rmultinom() function, which I call fastbinom. To keep things simple, it will take only one argument which I will use &lt;strong&gt;to divide 1.000.000 rmultinom simulations into 5 equal parts of 200.000 rmultinom simulations.&lt;/strong&gt; Each will be handled by a different core in my CPU boosting my speed.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fastbinom &amp;lt;- function(x) {
  rmultinom(x, size=2782, rep(1/30,30)) 
}

multfun_fin &amp;lt;- function(x){ 
  p &amp;lt;- mean(avc[1:30, 1:1000000] &amp;gt;=x)
  ifelse(p &amp;lt;= 0.5, p_val &amp;lt;-  2 * p, p_val &amp;lt;- 2*(1 - p))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here comes an additional overhead. Since, multfun_fin will be executed on different cores, we need to export the data to each cluster. Windows rely on &lt;strong&gt;clusterExport()&lt;/strong&gt; for data to be copied to each cluster.&lt;/p&gt;
&lt;p&gt;Test the final optimized code.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Final optimized code 
system.time({
cl &amp;lt;- makeCluster(5)
avc &amp;lt;- parLapply(cl , c(200000, 200000, 200000, 200000, 200000), fastbinom)
avc &amp;lt;- do.call(cbind, avc)
clusterExport(cl, varlist=&amp;quot;avc&amp;quot;, envir=environment())
parLapply(cl, c(124,119,119,197,102), multfun_fin)
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    user  system elapsed 
##    0.60    0.61    3.05&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stopCluster(cl)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Quite a bit improvement!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;final-test&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Final test&lt;/h1&gt;
&lt;p&gt;Let’s now put things together, I will test different versions I created so far. But this time for more input values, I will use my function for each of the 30 categories and by using up to 1.000.000 simulations.&lt;/p&gt;
&lt;p&gt;Let’s call the initial version: &lt;code&gt;original&lt;/code&gt;, second &lt;code&gt;parLapply&lt;/code&gt;, third &lt;code&gt;parLapply, optimized&lt;/code&gt; and the last &lt;code&gt;parLapply/fastbinom&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;multfun &amp;lt;- function(x){ 
  a &amp;lt;- list()
  avc &amp;lt;- rmultinom(1000000, size=2782, prob=rep(1/30, 30))  # Create probability matrix
  for (i in 1:30){ a[[i]] &amp;lt;- mean(avc[i,1:1000000] &amp;gt;=x) }   # Find probabilities for each day 
  ifelse(do.call(sum,a)/30 &amp;lt;= 0.5, p_val &amp;lt;-  2 * do.call(sum,a)/30, 
                                   p_val &amp;lt;- 2 * (1 - do.call(sum,a)/30))
}


# Original
system.time({
lapply(data$n, multfun)
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    user  system elapsed 
##   92.37    1.43   93.82&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# parLapply
system.time({
n_cores &amp;lt;- detectCores(logical=FALSE)
cl &amp;lt;- makeCluster(n_cores-1)
parLapply(cl , data$n, multfun)
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    user  system elapsed 
##    0.03    0.03   24.97&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stopCluster(cl)

multfun_opt &amp;lt;- function(x){ 
  avc &amp;lt;- rmultinom(1000000, size=2782, rep(1/30, 30))
  p &amp;lt;- mean(avc[1:30, 1:1000000] &amp;gt;=x)
  ifelse(p &amp;lt;= 0.5, p_val &amp;lt;-  2 * p, p_val &amp;lt;- 2*(1 - p))
  }

# parLapply, optimized
system.time({
n_cores &amp;lt;- detectCores(logical=FALSE)
cl &amp;lt;- makeCluster(n_cores-1)
parLapply(cl , data$n, multfun_opt)
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    user  system elapsed 
##    0.00    0.03   21.75&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stopCluster(cl)

multfun_fin &amp;lt;- function(x){ 
  p &amp;lt;- mean(avc[1:30, 1:1000000] &amp;gt;=x)
  ifelse(p &amp;lt;= 0.5, p_val &amp;lt;-  2 * p, p_val &amp;lt;- 2*(1 - p))
}

# parLapply, fastbinom
system.time({
cl &amp;lt;- makeCluster(5)
avc &amp;lt;- parLapply(cl , c(200000, 200000, 200000, 200000, 200000), fastbinom)
avc &amp;lt;- do.call(cbind,avc)
clusterExport(cl, varlist=&amp;quot;avc&amp;quot;, envir=environment())
parLapply(cl, data$n, multfun_fin)
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    user  system elapsed 
##    0.56    0.60    4.10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stopCluster(cl)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is an additonal comparision, testing time differences between different versions and to be more precise I simulated up to 10.000.000 multinomial distributions.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(readxl)
library(tidyverse)
library(viridis)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: viridisLite&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;speedtest &amp;lt;- read_excel(&amp;quot;posts_data/parallelprocessing_speed_tests.xlsx&amp;quot;, sheet =3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## New names:
## * `` -&amp;gt; ...1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;speedtest &amp;lt;- speedtest[-1]
spd &amp;lt;- gather(speedtest, version, seconds, -c(rmultinom,n))
spd$version &amp;lt;- factor(spd$version, labels = c(&amp;quot;original&amp;quot;, &amp;quot;parlapply&amp;quot;, &amp;quot;parLapply/opt&amp;quot;, &amp;quot;parLapply/fastbinom&amp;quot;))

spdplot &amp;lt;- spd %&amp;gt;% filter(n &amp;gt;5) %&amp;gt;% 
  ggplot(aes(x=rmultinom, y=seconds, color=version)) + 
  geom_line() + 
  theme(text = element_text(size=18)) +
   labs(  x = &amp;quot;Number of simulations&amp;quot;, 
          y = &amp;quot;Time (seconds)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;spdplot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-11-15-speed-boosting-in-r-writing-efficient-code-parallel-programming_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;spd %&amp;gt;% filter(rmultinom ==10000000, n &amp;gt;5) %&amp;gt;%
  ggplot(aes(x=version, y=seconds)) + geom_col() + 
  theme(text = element_text(size=15)) + 
  geom_label(aes(label = seconds), alpha = 0.5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-11-15-speed-boosting-in-r-writing-efficient-code-parallel-programming_files/figure-html/unnamed-chunk-7-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;By splitting our original function into two and then applying parallel processing for each subtask we achieved more than 30X speed gain.&lt;/p&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Parallel processing is easy and can get your tasks extremely faster.&lt;/p&gt;
&lt;p&gt;Until next time!&lt;/p&gt;
&lt;p&gt;Serdar&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data Wrangling for Text mining: Extract individual elements from a Book</title>
      <link>/r/data-wrangling-text-mining/</link>
      <pubDate>Wed, 25 Sep 2019 00:00:00 +0000</pubDate>
      <guid>/r/data-wrangling-text-mining/</guid>
      <description>


&lt;p&gt;My ambitious goal is to write a machine learning algorithm that predicts authors. But let’s start with something simpler. An important part in a Data Science workflow is data preparation. &lt;strong&gt;Clean it, reformat it and make it usable for further analysis.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:unnamed-chunk-1&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/img/patrick-tomasso-Oaqk7qqNh_c-unsplash.jpg&#34; alt=&#34;Photo by Patrick Tomasso on Unsplash&#34;  /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: Photo by Patrick Tomasso on Unsplash
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I will work on a Poetry book called “New Poems” from D. H. Lawrence. You can download it from &lt;a href=&#34;https://www.gutenberg.org/&#34;&gt;Project Gutenberg website&lt;/a&gt; which is a library of over 60,000 free eBooks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The goal is to isolate each poem individually for text mining analysis.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let’s figure out a solution.&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    I will use the table of contents section to &lt;!-- raw HTML omitted --&gt;fish out each poem separately&lt;!-- raw HTML omitted --&gt; by using two &lt;!-- raw HTML omitted --&gt;for loops.&lt;!-- raw HTML omitted --&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;div id=&#34;install-required-packages&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Install required packages&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
library(stringr)
library(stringi)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;copy-the-book-from-dh-lawrence-new-poems&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Copy the book from DH Lawrence “New Poems”&lt;/h3&gt;
&lt;p&gt;At gutenberg website there are couple of slightly different formats of the book. Since there were some mistakes in the .txt file I used
the html version &lt;a href=&#34;http://www.gutenberg.org/files/22726/22726-h/22726-h.htm&#34;&gt;here&lt;/a&gt;. I copied the text and pasted it in a text editor and saved to my working directory.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lawrence &amp;lt;- readLines(&amp;quot;posts_data/lawrence_new_poems.txt&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our file contains &lt;code&gt;2181&lt;/code&gt; lines. With square brackets [ ] we can view the lines we want. Let’s look at the first few lines;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lawrence[1:5]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;&amp;quot;                                                                    
## [2] &amp;quot;The Project Gutenberg EBook of New Poems, by D. H. Lawrence&amp;quot;         
## [3] &amp;quot;&amp;quot;                                                                    
## [4] &amp;quot;This eBook is for the use of anyone anywhere at no cost and with&amp;quot;    
## [5] &amp;quot;almost no restrictions whatsoever.  You may copy it, give it away or&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:unnamed-chunk-2&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/img/thiebaud-faix-eBkEJ9cH5b4-unsplash.jpg&#34; alt=&#34;Photo by Thiebaud Faix on Unsplash&#34;  /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 2: Photo by Thiebaud Faix on Unsplash
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;a href=&#34;http://www.gutenberg.org/files/22726/22726-h/22726-h.htm&#34;&gt;book&lt;/a&gt; has 42 poems in total. Table of contents (TOC) starts with the line “CONTENTS” and ends with the line “ON THAT DAY”.&lt;/p&gt;
&lt;p&gt;I will use those lines to extract the TOC. Stringr package comes in handy here. &lt;strong&gt;str_which()&lt;/strong&gt; function returns line index numbers for a given term.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;start &amp;lt;- str_which(lawrence, pattern = fixed(&amp;quot;CONTENTS&amp;quot;))
start&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 53&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lawrence[start]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;CONTENTS&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# We are choosing first appearance of &amp;quot;ON THAT DAY&amp;quot; with [1] because it appears 
# also in the Poem title later.
end &amp;lt;-  str_which(lawrence, pattern = fixed(&amp;quot;ON THAT DAY&amp;quot;))[1]
end&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 137&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lawrence[end]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;ON THAT DAY&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Slicing the lines from &lt;code&gt;54&lt;/code&gt; to &lt;code&gt;137&lt;/code&gt; will give us the TOC.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;TOC &amp;lt;- lawrence[(start+1):(end)]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To remove empty spaces I will use here &lt;strong&gt;stri_remove_empty()&lt;/strong&gt; function from &lt;strong&gt;stringi&lt;/strong&gt; package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;TOC &amp;lt;- stri_remove_empty(TOC)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s look at how the clean TOC looks.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;TOC &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;APPREHENSION&amp;quot;               &amp;quot;COMING AWAKE&amp;quot;              
##  [3] &amp;quot;FROM A COLLEGE WINDOW&amp;quot;      &amp;quot;FLAPPER&amp;quot;                   
##  [5] &amp;quot;BIRDCAGE WALK&amp;quot;              &amp;quot;LETTER FROM TOWN: THE&amp;quot;     
##  [7] &amp;quot;FLAT SUBURBS, S.W., IN THE&amp;quot; &amp;quot;THIEF IN THE NIGHT&amp;quot;        
##  [9] &amp;quot;LETTER FROM TOWN: ON A&amp;quot;     &amp;quot;SUBURBS ON A HAZY DAY&amp;quot;     
## [11] &amp;quot;HYDE PARK AT NIGHT, BEFORE&amp;quot; &amp;quot;GIPSY&amp;quot;                     
## [13] &amp;quot;TWO-FOLD&amp;quot;                   &amp;quot;UNDER THE OAK&amp;quot;             
## [15] &amp;quot;SIGH NO MORE&amp;quot;               &amp;quot;LOVE STORM&amp;quot;                
## [17] &amp;quot;PARLIAMENT HILL IN THE&amp;quot;     &amp;quot;PICCADILLY CIRCUS AT NIGHT&amp;quot;
## [19] &amp;quot;TARANTELLA&amp;quot;                 &amp;quot;IN CHURCH&amp;quot;                 
## [21] &amp;quot;PIANO&amp;quot;                      &amp;quot;EMBANKMENT AT NIGHT,&amp;quot;      
## [23] &amp;quot;PHANTASMAGORIA&amp;quot;             &amp;quot;NEXT MORNING&amp;quot;              
## [25] &amp;quot;PALIMPSEST OF TWILIGHT&amp;quot;     &amp;quot;EMBANKMENT AT NIGHT,&amp;quot;      
## [27] &amp;quot;WINTER IN THE BOULEVARD&amp;quot;    &amp;quot;SCHOOL ON THE OUTSKIRTS&amp;quot;   
## [29] &amp;quot;SICKNESS&amp;quot;                   &amp;quot;EVERLASTING FLOWERS&amp;quot;       
## [31] &amp;quot;THE NORTH COUNTRY&amp;quot;          &amp;quot;BITTERNESS OF DEATH&amp;quot;       
## [33] &amp;quot;SEVEN SEALS&amp;quot;                &amp;quot;READING A LETTER&amp;quot;          
## [35] &amp;quot;TWENTY YEARS AGO&amp;quot;           &amp;quot;INTIME&amp;quot;                    
## [37] &amp;quot;TWO WIVES&amp;quot;                  &amp;quot;HEIMWEH&amp;quot;                   
## [39] &amp;quot;DEBACLE&amp;quot;                    &amp;quot;NARCISSUS&amp;quot;                 
## [41] &amp;quot;AUTUMN SUNSHINE&amp;quot;            &amp;quot;ON THAT DAY&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we will extract main text containing only the poems without TOC and other metadata. We need to slice the document starting from the end of the contents &lt;code&gt;(end)&lt;/code&gt; till end of the last poem.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# After the last poem some metadata starts with &amp;quot;End of the Project...&amp;quot;
# We will slice until this line
end_main &amp;lt;- str_which(lawrence, &amp;quot;End of the Project Gutenberg EBook of New Poems, by D. H. Lawrence&amp;quot;)
# Capture main text
lawrence_body &amp;lt;- lawrence[(end+1):(end_main -1)]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we have TOC and main body of the book as two separate objects.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;first-for-loop&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;First for loop&lt;/h3&gt;
&lt;p&gt;We will use TOC and a &lt;code&gt;for loop&lt;/code&gt; to get the index numbers of the title’s of each poem.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# First initiate an empty list
index &amp;lt;- list()
# For loop
for (i in 1:42) {
index[[i]] &amp;lt;- str_which(lawrence_body, pattern = TOC[i])
}

index&amp;lt;- unlist(index)
index&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]    9   37   59   82  110  126  164  192  209  253  276  314  332  347
## [15]  387  428  473  496  536  570  593  621  768  664  707  745  621  768
## [29]  901  933  958  990 1057 1100 1193 1253 1286 1313 1376 1502 1527 1571
## [43] 1606 1644&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;for loop&lt;/code&gt; we created here uses each title in TOC as a pattern inside a &lt;strong&gt;str_which()&lt;/strong&gt; function to find the index number where it detects this pattern.&lt;/p&gt;
&lt;p&gt;For example TOC[1] will use the title of first poem as a pattern and it will return the line number where the poem starts. &lt;strong&gt;At the end, we will have a list of starting lines of each poem.&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;TOC[1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;APPREHENSION&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str_which(lawrence_body, pattern = TOC[1])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 9&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# e.g. The poem Apprehension starts at line index number 9&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Selecting the lines from the beginning of the &lt;strong&gt;first poem&lt;/strong&gt; until the beginning of the &lt;strong&gt;second poem&lt;/strong&gt; will give us the first poem. By iterating everything by +1 we will capture all 42 poems.&lt;/p&gt;
&lt;p&gt;Since the title EMBANKMENT AT NIGHT appears in the titles of two poems we will do a slight correction here. To correct this, I will remove first appearance of index 768 and second appearance of 621.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;index &amp;lt;- index[-c(23,27)]
index&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]    9   37   59   82  110  126  164  192  209  253  276  314  332  347
## [15]  387  428  473  496  536  570  593  621  664  707  745  768  901  933
## [29]  958  990 1057 1100 1193 1253 1286 1313 1376 1502 1527 1571 1606 1644&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;length(index)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 42&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Not to miss the last poem, I have to add the line index of the
# end of the main text. We can use the end of the main body as above.
index[43] &amp;lt;- end_main -1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we have 42 index numbers matching the title of each poem 1 index number to label the end of the main text. We will use those to extract poems separately.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;second-for-loop&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Second for loop&lt;/h3&gt;
&lt;p&gt;It’s time for the trick. Finally we can capture each 42 poem separately in a list by using a second &lt;code&gt;for loop.&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Create an empty list: poems
poems &amp;lt;- list()
for (i in 1:42) {
    
    poems[[i]] &amp;lt;- lawrence_body[(index[i]:index[i+1]-1)]  
}
# Visualize the first poem
writeLines(poems[[1]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## APPREHENSION
## AND all hours long, the town
##        Roars like a beast in a cave
##      That is wounded there
##      And like to drown;
##        While days rush, wave after wave
##      On its lair.
## 
##      An invisible woe unseals
##        The flood, so it passes beyond
##      All bounds: the great old city
##      Recumbent roars as it feels
##        The foamy paw of the pond
##      Reach from immensity.
## 
##      But all that it can do
##        Now, as the tide rises,
##      Is to listen and hear the grim
##      Waves crash like thunder through
##        The splintered streets, hear noises
##      Roll hollow in the interim.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s check if we got what we wanted.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(poems)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## List of 42
##  $ : chr [1:29] &amp;quot;&amp;quot; &amp;quot;APPREHENSION&amp;quot; &amp;quot;AND all hours long, the town&amp;quot; &amp;quot;       Roars like a beast in a cave&amp;quot; ...
##  $ : chr [1:23] &amp;quot;&amp;quot; &amp;quot;COMING AWAKE&amp;quot; &amp;quot;WHEN I woke, the lake-lights were quivering on the&amp;quot; &amp;quot;          wall,&amp;quot; ...
##  $ : chr [1:24] &amp;quot;&amp;quot; &amp;quot;FROM A COLLEGE WINDOW&amp;quot; &amp;quot;THE glimmer of the limes, sun-heavy, sleeping,&amp;quot; &amp;quot;        Goes trembling past me up the College wall.&amp;quot; ...
##  $ : chr [1:29] &amp;quot;&amp;quot; &amp;quot;FLAPPER&amp;quot; &amp;quot;LOVE has crept out of her sealéd heart&amp;quot; &amp;quot;       As a field-bee, black and amber,&amp;quot; ...
##  $ : chr [1:17] &amp;quot;&amp;quot; &amp;quot;BIRDCAGE WALK&amp;quot; &amp;quot;WHEN the wind blows her veil&amp;quot; &amp;quot;       And uncovers her laughter&amp;quot; ...
##  $ : chr [1:39] &amp;quot;&amp;quot; &amp;quot;LETTER FROM TOWN: THE&amp;quot; &amp;quot;ALMOND TREE&amp;quot; &amp;quot;YOU promised to send me some violets. Did you&amp;quot; ...
##  $ : chr [1:29] &amp;quot;&amp;quot; &amp;quot;FLAT SUBURBS, S.W., IN THE&amp;quot; &amp;quot;MORNING&amp;quot; &amp;quot;THE new red houses spring like plants&amp;quot; ...
##  $ : chr [1:18] &amp;quot;&amp;quot; &amp;quot;THIEF IN THE NIGHT&amp;quot; &amp;quot;LAST night a thief came to me&amp;quot; &amp;quot;       And struck at me with something dark.&amp;quot; ...
##  $ : chr [1:45] &amp;quot;&amp;quot; &amp;quot;LETTER FROM TOWN: ON A&amp;quot; &amp;quot;GREY EVENING IN MARCH&amp;quot; &amp;quot;THE clouds are pushing in grey reluctance slowly&amp;quot; ...
##  $ : chr [1:24] &amp;quot;&amp;quot; &amp;quot;SUBURBS ON A HAZY DAY&amp;quot; &amp;quot;     O STIFFLY shapen houses that change not,&amp;quot; &amp;quot;       What conjuror&amp;#39;s cloth was thrown across you,&amp;quot; ...
##  $ : chr [1:39] &amp;quot;&amp;quot; &amp;quot;HYDE PARK AT NIGHT, BEFORE&amp;quot; &amp;quot;THE WAR&amp;quot; &amp;quot;     Clerks.&amp;quot; ...
##  $ : chr [1:19] &amp;quot;&amp;quot; &amp;quot;GIPSY&amp;quot; &amp;quot;     I, THE man with the red scarf,&amp;quot; &amp;quot;        Will give thee what I have, this last week&amp;#39;s earn-&amp;quot; ...
##  $ : chr [1:16] &amp;quot;&amp;quot; &amp;quot;TWO-FOLD&amp;quot; &amp;quot;     How gorgeous that shock of red lilies, and larkspur&amp;quot; &amp;quot;         cleaving&amp;quot; ...
##  $ : chr [1:41] &amp;quot;&amp;quot; &amp;quot;UNDER THE OAK&amp;quot; &amp;quot;     You, if you were sensible,&amp;quot; &amp;quot;     When I tell you the stars flash signals, each one&amp;quot; ...
##  $ : chr [1:42] &amp;quot;&amp;quot; &amp;quot;SIGH NO MORE&amp;quot; &amp;quot;THE cuckoo and the coo-dove&amp;#39;s ceaseless calling,&amp;quot; &amp;quot;                    Calling,&amp;quot; ...
##  $ : chr [1:46] &amp;quot;&amp;quot; &amp;quot;LOVE STORM&amp;quot; &amp;quot;MANY roses in the wind&amp;quot; &amp;quot;     Are tapping at the window-sash.&amp;quot; ...
##  $ : chr [1:24] &amp;quot;&amp;quot; &amp;quot;PARLIAMENT HILL IN THE&amp;quot; &amp;quot;EVENING&amp;quot; &amp;quot;THE houses fade in a melt of mist&amp;quot; ...
##  $ : chr [1:41] &amp;quot;&amp;quot; &amp;quot;PICCADILLY CIRCUS AT NIGHT&amp;quot; &amp;quot;     Street-Walkers.&amp;quot; &amp;quot;WHEN into the night the yellow light is roused like&amp;quot; ...
##  $ : chr [1:35] &amp;quot;&amp;quot; &amp;quot;TARANTELLA&amp;quot; &amp;quot;SAD as he sits on the white sea-stone&amp;quot; &amp;quot;     And the suave sea chuckles, and turns to the moon,&amp;quot; ...
##  $ : chr [1:24] &amp;quot;&amp;quot; &amp;quot;IN CHURCH&amp;quot; &amp;quot;IN the choir the boys are singing the hymn.&amp;quot; &amp;quot;             The morning light on their lips&amp;quot; ...
##  $ : chr [1:29] &amp;quot;&amp;quot; &amp;quot;PIANO&amp;quot; &amp;quot;     Softly, in the dusk, a woman is singing to me;&amp;quot; &amp;quot;     Taking me back down the vista of years, till I see&amp;quot; ...
##  $ : chr [1:44] &amp;quot;&amp;quot; &amp;quot;EMBANKMENT AT NIGHT,&amp;quot; &amp;quot;BEFORE THE WAR&amp;quot; &amp;quot;     Charity.&amp;quot; ...
##  $ : chr [1:44] &amp;quot;&amp;quot; &amp;quot;PHANTASMAGORIA&amp;quot; &amp;quot;RIGID sleeps the house in darkness, I alone&amp;quot; &amp;quot;     Like a thing unwarrantable cross the hall&amp;quot; ...
##  $ : chr [1:39] &amp;quot;&amp;quot; &amp;quot;NEXT MORNING&amp;quot; &amp;quot;     How have I wandered here to this vaulted room&amp;quot; &amp;quot;     In the house of life?—the floor was ruffled with gold&amp;quot; ...
##  $ : chr [1:24] &amp;quot;&amp;quot; &amp;quot;PALIMPSEST OF TWILIGHT&amp;quot; &amp;quot;DARKNESS comes out of the earth&amp;quot; &amp;quot;       And swallows dip into the pallor of the west;&amp;quot; ...
##  $ : chr [1:134] &amp;quot;&amp;quot; &amp;quot;EMBANKMENT AT NIGHT,&amp;quot; &amp;quot;BEFORE THE WAR&amp;quot; &amp;quot;     Outcasts.&amp;quot; ...
##  $ : chr [1:33] &amp;quot;&amp;quot; &amp;quot;WINTER IN THE BOULEVARD&amp;quot; &amp;quot;THE frost has settled down upon the trees&amp;quot; &amp;quot;     And ruthlessly strangled off the fantasies&amp;quot; ...
##  $ : chr [1:26] &amp;quot;&amp;quot; &amp;quot;SCHOOL ON THE OUTSKIRTS&amp;quot; &amp;quot;     How different, in the middle of snows, the great&amp;quot; &amp;quot;          school rises red!&amp;quot; ...
##  $ : chr [1:33] &amp;quot;&amp;quot; &amp;quot;SICKNESS&amp;quot; &amp;quot;WAVING slowly before me, pushed into the dark,&amp;quot; &amp;quot;     Unseen my hands explore the silence, drawing the&amp;quot; ...
##  $ : chr [1:68] &amp;quot;&amp;quot; &amp;quot;EVERLASTING FLOWERS&amp;quot; &amp;quot;WHO do you think stands watching&amp;quot; &amp;quot;       The snow-tops shining rosy&amp;quot; ...
##  $ : chr [1:44] &amp;quot;&amp;quot; &amp;quot;THE NORTH COUNTRY&amp;quot; &amp;quot;IN another country, black poplars shake them-&amp;quot; &amp;quot;         selves over a pond,&amp;quot; ...
##  $ : chr [1:94] &amp;quot;&amp;quot; &amp;quot;BITTERNESS OF DEATH&amp;quot; &amp;quot;     I&amp;quot; &amp;quot;AH, stern, cold man,&amp;quot; ...
##  $ : chr [1:61] &amp;quot;&amp;quot; &amp;quot;SEVEN SEALS&amp;quot; &amp;quot;SINCE this is the last night I keep you home,&amp;quot; &amp;quot;     Come, I will consecrate you for the journey.&amp;quot; ...
##  $ : chr [1:34] &amp;quot;&amp;quot; &amp;quot;READING A LETTER&amp;quot; &amp;quot;SHE sits on the recreation ground&amp;quot; &amp;quot;       Under an oak whose yellow buds dot the pale&amp;quot; ...
##  $ : chr [1:28] &amp;quot;&amp;quot; &amp;quot;TWENTY YEARS AGO&amp;quot; &amp;quot;ROUND the house were lilacs and strawberries&amp;quot; &amp;quot;       And foal-foots spangling the paths,&amp;quot; ...
##  $ : chr [1:64] &amp;quot;&amp;quot; &amp;quot;INTIME&amp;quot; &amp;quot;RETURNING, I find her just the same,&amp;quot; &amp;quot;     At just the same old delicate game.&amp;quot; ...
##  $ : chr [1:127] &amp;quot;&amp;quot; &amp;quot;TWO WIVES&amp;quot; &amp;quot;     I&amp;quot; &amp;quot;INTO the shadow-white chamber silts the white&amp;quot; ...
##  $ : chr [1:26] &amp;quot;&amp;quot; &amp;quot;HEIMWEH&amp;quot; &amp;quot;FAR-OFF the lily-statues stand white-ranked in the&amp;quot; &amp;quot;         garden at home.&amp;quot; ...
##  $ : chr [1:45] &amp;quot;&amp;quot; &amp;quot;DEBACLE&amp;quot; &amp;quot;THE trees in trouble because of autumn,&amp;quot; &amp;quot;       And scarlet berries falling from the bush,&amp;quot; ...
##  $ : chr [1:36] &amp;quot;&amp;quot; &amp;quot;NARCISSUS&amp;quot; &amp;quot;WHERE the minnows trace&amp;quot; &amp;quot;     A glinting web quick hid in the gloom of the brook,&amp;quot; ...
##  $ : chr [1:39] &amp;quot;&amp;quot; &amp;quot;AUTUMN SUNSHINE&amp;quot; &amp;quot;THE sun sets out the autumn crocuses&amp;quot; &amp;quot;       And fills them up a pouring measure&amp;quot; ...
##  $ : chr [1:173] &amp;quot;&amp;quot; &amp;quot;ON THAT DAY&amp;quot; &amp;quot;   ON that day&amp;quot; &amp;quot;     I shall put roses on roses, and cover your grave&amp;quot; ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;final-thoughts&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Final Thoughts&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Data Preparation&lt;/strong&gt; is a crucial step in Data Science as data comes rarely ready to use.&lt;/p&gt;
&lt;p&gt;Here, starting from a Poetry Book I isolated each poem separately in a list. Hard part is done. &lt;strong&gt;Now, I can identify how many rhymes each poem contains, word usage across different poems, the similarities between them and many more to gain insights about the author.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I could also analyze the whole book as a single document but by isolating each element I will gain much deeper insight from the data.&lt;/p&gt;
&lt;p&gt;Do you apply similar techniques to isolate chapters or sections from the book or documents to compare and contrast different parts?&lt;/p&gt;
&lt;p&gt;Thank you for reading this post. Please feel free to comment below with your thoughts/feedback.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
