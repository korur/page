<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ggplot2 | SERDAR KORUR</title>
    <link>/tags/ggplot2/</link>
      <atom:link href="/tags/ggplot2/index.xml" rel="self" type="application/rss+xml" />
    <description>ggplot2</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Wed, 16 Oct 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/logo.png</url>
      <title>ggplot2</title>
      <link>/tags/ggplot2/</link>
    </image>
    
    <item>
      <title>Add custom summary statistics in ggplot2</title>
      <link>/r/stats-ggplot/</link>
      <pubDate>Wed, 16 Oct 2019 00:00:00 +0000</pubDate>
      <guid>/r/stats-ggplot/</guid>
      <description>


&lt;p&gt;It is hard to understand your data by looking at the numbers on a csv file. You need to plot it. And adding informative statistics to your plots will make it easier.&lt;/p&gt;
&lt;p&gt;To evaluate data, we typically use &lt;strong&gt;mean&lt;/strong&gt; and &lt;strong&gt;median&lt;/strong&gt; to define its central tendency and &lt;strong&gt;range, quartiles, variance&lt;/strong&gt; and &lt;strong&gt;standard deviation&lt;/strong&gt; to define how spread it is.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mean&lt;/strong&gt; and &lt;strong&gt;standard deviation&lt;/strong&gt; is a good representation of the data if we don’t have extreme values that result in a skewed distribution. On the other hand, when we have extreme values they might misguide us. In those conditions, &lt;code&gt;median&lt;/code&gt; and &lt;code&gt;quartiles&lt;/code&gt; will serve us better.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Median&lt;/strong&gt; is the central point which divides the data into half. &lt;strong&gt;Quartiles&lt;/strong&gt; are used to describe the spread of the data. The word comes from the Medieval Latin “quartilis” which means fourth and &lt;strong&gt;quartiles break the data into four equal parts&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The advantage is that they are much less effected by the outliers or skeweness of the data.
  &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;For this reason, &lt;strong&gt;quartiles are often used along with the median as the best measures of spread.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;They are often expressed as an &lt;strong&gt;Interquartile range (IQR)&lt;/strong&gt;, which is the interval between first and third quartiles and represents 50% of the data points.&lt;/p&gt;
&lt;p&gt;For example, you measured height of adults in a population, with Interquartile range you can describe a discrete interval centered around the median including 50% of the measurements.&lt;/p&gt;
&lt;p&gt;Here is a representative graph.&lt;img src=&#34;/img/quartiles.png&#34; alt=&#34;graph:wikipedia&#34; /&gt;[source:wikipedia]&lt;/p&gt;
&lt;div id=&#34;how-to-include-statistics-in-ggplot2&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;How to include statistics in ggplot2&lt;/h1&gt;
&lt;p&gt;Stats makes it easier to grasp the data. And &lt;strong&gt;different statistics are suited for different data types&lt;/strong&gt;. For example, you may want to show &lt;code&gt;a 95% confidence interval? mean? median?&lt;/code&gt; or any other statistics which captures the details best for your data in the hand.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So let’s go through on an example data.&lt;/strong&gt; The data is about the effects of two Herbicides (glyphosate &amp;amp; bentazone) on the yield of white mustard (Sinapis alba) seeds.&lt;/p&gt;
&lt;p&gt;First, import ggplot2 package and read in the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
path &amp;lt;- &amp;quot;C:/Users/serda/Downloads/S.alba.csv&amp;quot;
data &amp;lt;- read.csv(path)
str(data)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    68 obs. of  4 variables:
##  $ X        : int  1 2 3 4 5 6 7 8 9 10 ...
##  $ Dose     : int  0 0 0 0 0 0 0 0 10 10 ...
##  $ Herbicide: Factor w/ 2 levels &amp;quot;Bentazone&amp;quot;,&amp;quot;Glyphosate&amp;quot;: 2 2 2 2 2 2 2 2 2 2 ...
##  $ DryMatter: num  4.7 4.6 4.1 4.4 3.2 3 3.8 3.9 3.8 3.8 ...&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;path &amp;lt;- &amp;quot;C:/Users/serda/Downloads/S.alba.csv&amp;quot;
data &amp;lt;- read.csv(path)
str(data)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    68 obs. of  4 variables:
##  $ X        : int  1 2 3 4 5 6 7 8 9 10 ...
##  $ Dose     : int  0 0 0 0 0 0 0 0 10 10 ...
##  $ Herbicide: Factor w/ 2 levels &amp;quot;Bentazone&amp;quot;,&amp;quot;Glyphosate&amp;quot;: 2 2 2 2 2 2 2 2 2 2 ...
##  $ DryMatter: num  4.7 4.6 4.1 4.4 3.2 3 3.8 3.9 3.8 3.8 ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These chemicals used at 8 different doses and the yield is measured. I will convert the dose variable as a factor.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data$Dose &amp;lt;- as.factor(data$Dose)
levels(data$Dose)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;0&amp;quot;   &amp;quot;10&amp;quot;  &amp;quot;20&amp;quot;  &amp;quot;40&amp;quot;  &amp;quot;80&amp;quot;  &amp;quot;160&amp;quot; &amp;quot;320&amp;quot; &amp;quot;640&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can make an initial plot to visualize the data. We’ll plot the yield variable &lt;code&gt;DryMatter&lt;/code&gt; against &lt;code&gt;Dose&lt;/code&gt; of the Herbicides. We can assign &lt;code&gt;col&lt;/code&gt; argument to map different chemical compounds to different colors.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# I will define a dodge and jitterdodge object to avoid overlapping data points or stats that we will overlay later
posn.d &amp;lt;- position_dodge(width=0.2)
posn.jd &amp;lt;- position_jitterdodge(jitter.width = 0.1, dodge.width=0.2)
p &amp;lt;- ggplot(data, aes(x=Dose, y=DryMatter, col=Herbicide, fill=Herbicide, group=Herbicide ))
p + geom_point(position =posn.jd)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-16-add-custom-summary-statistics-into-your-ggplot_files/figure-html/visualize%20the%20data-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;What we see here is that, at low doses both Herbicides led similar yields but starting from Dose 40 we see a drastic negative impact of Benzoate on yield.&lt;/p&gt;
&lt;p&gt;On top of that plot, I want to overlay the &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt; and also &lt;code&gt;median&lt;/code&gt; and &lt;code&gt;Interquartile range&lt;/code&gt; for each set of yield measurements.&lt;/p&gt;
&lt;p&gt;I need one function to calculate the &lt;strong&gt;median&lt;/strong&gt; and the &lt;strong&gt;interquartile range(IQR) 1-3&lt;/strong&gt;, and another to calculate min(), max() values.&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    In order to use the results of a function directly in ggplot2 we need to &lt;strong&gt;ensure that the names of the variables match the aesthetics needed for our respective geoms&lt;/strong&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Function for median and IQR

median_IQR &amp;lt;- function(x) {
  data.frame(y = median(x), # Median
             ymin = quantile(x)[2], # 1st quartile
             ymax = quantile(x)[4])  # 3rd quartile
}

# Function for min, max values
range &amp;lt;- function(x) {
  data.frame(ymin=min(x),
             ymax=max(x))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s replot with the statistics we wanted to overlay. You can use two&lt;code&gt;stat_summary()&lt;/code&gt; layers to add our stats. You can set the &lt;code&gt;fun.data&lt;/code&gt; argument to the specific function defined above.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Updated plot
p + stat_summary(geom = &amp;quot;linerange&amp;quot;, fun.data = median_IQR, position = posn.d, size=3) + stat_summary(geom = &amp;quot;linerange&amp;quot;, fun.data = range, position = posn.d, size=3, alpha=0.5)+ stat_summary(geom = &amp;quot;point&amp;quot;, fun.y = &amp;quot;median&amp;quot;, position = posn.d, size = 3, col = &amp;quot;black&amp;quot;, shape = &amp;quot;X&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-16-add-custom-summary-statistics-into-your-ggplot_files/figure-html/visualize%20with%20stats-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;conclusions&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Conclusions&lt;/h3&gt;
&lt;p&gt;Ggplot2 is a flexible package and knowing its intricacies will help you level up your visuals and gather better insights.&lt;/p&gt;
&lt;p&gt;To understand your data and to convey the insights you want to point out, you can include your choice of custom functions in ggplot &lt;code&gt;stat_summary()&lt;/code&gt; layer similarly as we did above.&lt;/p&gt;
&lt;p&gt;The data we have here was small. With bigger data, it will be more crucial to overlay summary statistics for effective visuals.&lt;/p&gt;
&lt;p&gt;Until next time!&lt;/p&gt;
&lt;p&gt;Serdar&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data Preparation: Web Scraping html tables with rvest</title>
      <link>/r/scrape-tables-rvest/</link>
      <pubDate>Thu, 10 Oct 2019 00:00:00 +0000</pubDate>
      <guid>/r/scrape-tables-rvest/</guid>
      <description>


&lt;div id=&#34;accessing-different-data-sources&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Accessing different data sources&lt;/h2&gt;
&lt;p&gt;Sometimes, the data you need is available on the web. Accessing those will ease your life as a data scientist.&lt;/p&gt;
&lt;p&gt;I want to perform an exploratory data analysis on &lt;strong&gt;2018/19 Season of England Premier league&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Are there changes in team performances during the season timeline?&lt;/li&gt;
&lt;li&gt;Does some teams cluster?&lt;/li&gt;
&lt;li&gt;Which is the earliest week we can predict team’s final positions?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I need the &lt;strong&gt;standings table&lt;/strong&gt; for each week of the season and integrate them in a way that will allow me to plot the graphs that I want.
We will scrap those tables from &lt;a href=&#34;https://www.weltfussball.de/&#34; class=&#34;uri&#34;&gt;https://www.weltfussball.de/&lt;/a&gt;.&lt;img src=&#34;/img/welt.png&#34; alt=&#34;welt&#34; /&gt;&lt;/p&gt;
&lt;p&gt;For example standings table for the Week 1 is at the url:&lt;br /&gt;
&lt;a href=&#34;https://www.weltfussball.de/spielplan/eng-premier-league-2018-2019-spieltag/1&#34; class=&#34;uri&#34;&gt;https://www.weltfussball.de/spielplan/eng-premier-league-2018-2019-spieltag/1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For the consequent weeks only the number at the end changes e.g.&lt;br /&gt;
&lt;a href=&#34;https://www.weltfussball.de/spielplan/eng-premier-league-2018-2019-spieltag/2&#34;&gt;../spielplan/eng-premier-league-2018-2019-spieltag/&lt;strong&gt;2&lt;/strong&gt;&lt;/a&gt; ←&lt;br /&gt;
&lt;a href=&#34;https://www.weltfussball.de/spielplan/eng-premier-league-2018-2019-spieltag/3&#34;&gt;../spielplan/eng-premier-league-2018-2019-spieltag/&lt;strong&gt;3&lt;/strong&gt;&lt;/a&gt; ←&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Pull the necessary packages  

library(rvest)     # xml2
library(tidyverse) # ggplot2, dplyr, tidyr, readr, 
                   # purrr, tibble, stringr, forcats
library(gganimate)
library(RColorBrewer)
library(kableExtra)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Define the remote url
baseUrl &amp;lt;- &amp;quot;https://www.weltfussball.de/&amp;quot;
path &amp;lt;- &amp;quot;spielplan/eng-premier-league-2018-2019-spieltag/&amp;quot;
fileName &amp;lt;- 1
url &amp;lt;- paste0(baseUrl, path, fileName)
url&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;https://www.weltfussball.de/spielplan/eng-premier-league-2018-2019-spieltag/1&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We start by downloading and parsing the file with &lt;strong&gt;read_html()&lt;/strong&gt; function from the rvest package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tables &amp;lt;- read_html(url)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To extract the html table individually you can use &lt;strong&gt;XPath&lt;/strong&gt; syntax which defines parts on XML documents.&lt;/p&gt;
&lt;p&gt;To get the XPath for standings table open the url on google chrome,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;hover the mouse over the table &amp;gt; right click &amp;gt; inspect&lt;/strong&gt;&lt;br /&gt;
# This will open inspector&lt;/li&gt;
&lt;li&gt;Move your mouse a few lines up or down to find the line where whole table is highlighted&lt;/li&gt;
&lt;li&gt;Right click &amp;gt; Copy &amp;gt; Copy full XPath&lt;img src=&#34;/img/weltxpath.png&#34; alt=&#34;weltxpath&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can feed that XPath we copied to html_nodes() function and extract the node which contains the table.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;xpath = &amp;quot;/html/body/div[3]/div[2]/div[4]/div[2]/div[1]/div/div[7]/div/table[1]&amp;quot;
nodes &amp;lt;- html_nodes(tables, xpath = xpath)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At the end, html_table() function will extract us the individual table.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;html_table(nodes)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
##     # Mannschaft              Mannschaft Sp. S. U. N. Tore Dif. Pk.
## 1   1         NA            Liverpool FC   1  1  0  0  4:0    4   3
## 2   2         NA              Chelsea FC   1  1  0  0  3:0    3   3
## 3   3         NA         AFC Bournemouth   1  1  0  0  2:0    2   3
## 4  NA         NA          Crystal Palace   1  1  0  0  2:0    2   3
## 5  NA         NA         Manchester City   1  1  0  0  2:0    2   3
## 6  NA         NA              Watford FC   1  1  0  0  2:0    2   3
## 7   7         NA       Manchester United   1  1  0  0  2:1    1   3
## 8  NA         NA       Tottenham Hotspur   1  1  0  0  2:1    1   3
## 9   9         NA              Everton FC   1  0  1  0  2:2    0   1
## 10 NA         NA Wolverhampton Wanderers   1  0  1  0  2:2    0   1
## 11 11         NA              Burnley FC   1  0  1  0  0:0    0   1
## 12 NA         NA          Southampton FC   1  0  1  0  0:0    0   1
## 13 13         NA          Leicester City   1  0  0  1  1:2   -1   0
## 14 NA         NA        Newcastle United   1  0  0  1  1:2   -1   0
## 15 15         NA              Arsenal FC   1  0  0  1  0:2   -2   0
## 16 NA         NA  Brighton &amp;amp; Hove Albion   1  0  0  1  0:2   -2   0
## 17 NA         NA            Cardiff City   1  0  0  1  0:2   -2   0
## 18 NA         NA               Fulham FC   1  0  0  1  0:2   -2   0
## 19 19         NA       Huddersfield Town   1  0  0  1  0:3   -3   0
## 20 20         NA         West Ham United   1  0  0  1  0:4   -4   0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wonderful, we scraped the standings table for the first week, but we want tables for each 38 week of the season.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You can make this easily by packing what we have done so far in a for loop.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As only the last number in our url link changes, we can code different url addresses as in &lt;code&gt;url[[i]] &amp;lt;- paste0(baseUrl, path, i)&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Create emtpy lists
url &amp;lt;- list()
pages &amp;lt;- list()
nodes &amp;lt;- list()
final &amp;lt;- list()
start &amp;lt;- Sys.time()
# For loop.
# It will connect one by one to 38 different url links predefined 
# by the line starting with url[[i]]
# Collect the information with read_html(), html_nodes() and html_table()
# Finally each table will be converted to a data frame
for(i in 1:38){
url[[i]] &amp;lt;- paste0(baseUrl, path, i)
pages[[i]] &amp;lt;- read_html(url[[i]])
nodes[[i]] &amp;lt;- html_nodes(pages[[i]], xpath = xpath)
final[[i]] &amp;lt;- data.frame(html_table(nodes[[i]]))
}

# By coding start and end times of the whole process 
# I can keep an eye on how fast my code is.
end &amp;lt;- Sys.time()
end-start&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Time difference of 22.62705 secs&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For example, &lt;code&gt;final[[19]]&lt;/code&gt; will give me standings of mid season:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;final[[19]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    X. Mannschaft            Mannschaft.1 Sp. S. U. N.  Tore Dif. Pk.
## 1   1         NA            Liverpool FC  19 16  3  0  43:7   36  51
## 2   2         NA       Tottenham Hotspur  19 15  0  4 42:18   24  45
## 3   3         NA         Manchester City  19 14  2  3 51:15   36  44
## 4   4         NA              Chelsea FC  19 12  4  3 37:16   21  40
## 5   5         NA              Arsenal FC  19 11  5  3 41:25   16  38
## 6   6         NA       Manchester United  19  9  5  5 37:31    6  32
## 7   7         NA          Leicester City  19  8  4  7 24:22    2  28
## 8   8         NA              Everton FC  19  7  6  6 31:29    2  27
## 9   9         NA         West Ham United  19  8  3  8 27:28   -1  27
## 10 10         NA              Watford FC  19  8  3  8 26:27   -1  27
## 11 11         NA Wolverhampton Wanderers  19  7  5  7 20:22   -2  26
## 12 12         NA         AFC Bournemouth  19  8  2  9 27:33   -6  26
## 13 13         NA  Brighton &amp;amp; Hove Albion  19  6  4  9 21:27   -6  22
## 14 14         NA          Crystal Palace  19  5  4 10 17:25   -8  19
## 15 15         NA        Newcastle United  19  4  5 10 14:26  -12  17
## 16 16         NA          Southampton FC  19  3  6 10 20:35  -15  15
## 17 17         NA            Cardiff City  19  4  3 12 18:38  -20  15
## 18 18         NA              Burnley FC  19  3  3 13 17:41  -24  12
## 19 19         NA               Fulham FC  19  2  5 12 17:43  -26  11
## 20 20         NA       Huddersfield Town  19  2  4 13 12:34  -22  10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Don’t mind the NAs in the second column, we will remove them soon.
Now, we have all 38 table in our list &lt;strong&gt;final&lt;/strong&gt;, we can combine them to a new data frame which will contain standings of the whole season.&lt;/p&gt;
&lt;p&gt;To be able to plot e.g. timeline, let’s keep the tidy data principles:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Each observation has its own row.&lt;/li&gt;
&lt;li&gt;Each variable has its own column.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since we have same column names in each table, we can use &lt;strong&gt;rbind&lt;/strong&gt; function to add rows of each table to the bottom of the first one. How to do that? We can’t use lapply() function here. It will not combine elements in a list. We can use &lt;strong&gt;do.call() function to perform the rbind() operation and combine all data frames we have&lt;/strong&gt;*.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;uk18 &amp;lt;-  do.call(&amp;quot;rbind&amp;quot;, final)
dim(uk18)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 760  10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(uk18)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   X. Mannschaft    Mannschaft.1 Sp. S. U. N. Tore Dif. Pk.
## 1  1         NA    Liverpool FC   1  1  0  0  4:0    4   3
## 2  2         NA      Chelsea FC   1  1  0  0  3:0    3   3
## 3  3         NA AFC Bournemouth   1  1  0  0  2:0    2   3
## 4 NA         NA  Crystal Palace   1  1  0  0  2:0    2   3
## 5 NA         NA Manchester City   1  1  0  0  2:0    2   3
## 6 NA         NA      Watford FC   1  1  0  0  2:0    2   3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Column names/shorcuts were in German, let’s replace them with the English words.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Correct final table
uk18 &amp;lt;- uk18  %&amp;gt;% select(3:10)
new_names &amp;lt;- c(&amp;quot;team&amp;quot;, &amp;quot;week&amp;quot;, &amp;quot;won&amp;quot;, &amp;quot;drawn&amp;quot;, &amp;quot;lost&amp;quot;, &amp;quot;goals&amp;quot;, 
               &amp;quot;difference&amp;quot;, &amp;quot;points&amp;quot;)
colnames(uk18) &amp;lt;- new_names&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Goals variable is contains two different data separated with “:”. &lt;code&gt;E.g. (4:0)&lt;/code&gt;. Those represent goals scored:goals scored against. Let’s split goals column into two by &lt;strong&gt;separate() function from tidyr&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;uk18 &amp;lt;- uk18 %&amp;gt;% separate(goals, c(&amp;quot;scored&amp;quot;, &amp;quot;against&amp;quot;), sep=&amp;quot;\\:&amp;quot;)
head(uk18)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##              team week won drawn lost scored against difference points
## 1    Liverpool FC    1   1     0    0      4       0          4      3
## 2      Chelsea FC    1   1     0    0      3       0          3      3
## 3 AFC Bournemouth    1   1     0    0      2       0          2      3
## 4  Crystal Palace    1   1     0    0      2       0          2      3
## 5 Manchester City    1   1     0    0      2       0          2      3
## 6      Watford FC    1   1     0    0      2       0          2      3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;I want to order my legend with the same order of teams final positions&lt;/strong&gt;. Let’s filter for the last week of the season and arrange them in descending order. I will assign this list to the factor levels of the team variable.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Extract team names in the order as the season end
uk18_filt &amp;lt;- uk18 %&amp;gt;% filter(week == 38) %&amp;gt;% arrange(desc(points))
knitr::kable(uk18_filt)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
team
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
week
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
won
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
drawn
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
lost
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
scored
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
against
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
difference
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
points
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Manchester City
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
32
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
95
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
23
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
72
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
98
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Liverpool FC
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
30
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
89
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
22
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
67
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
97
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Chelsea FC
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
21
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
63
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
39
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
24
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
72
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Tottenham Hotspur
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
23
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
67
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
39
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
28
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
71
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Arsenal FC
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
21
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
73
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
51
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
70
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Manchester United
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
65
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
54
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
66
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Wolverhampton Wanderers
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
47
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
46
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
57
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Everton FC
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
54
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
46
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
54
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Leicester City
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
51
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
48
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
52
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
West Ham United
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
52
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
55
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
52
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Watford FC
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
52
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
59
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
50
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Crystal Palace
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
17
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
51
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
53
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
49
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Newcastle United
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
17
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
42
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
48
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
45
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
AFC Bournemouth
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
56
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
70
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-14
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
45
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Burnley FC
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
20
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
45
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
68
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-23
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Southampton FC
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
17
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
45
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
65
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-20
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
39
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Brighton &amp;amp; Hove Albion
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
20
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
35
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
60
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-25
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
36
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Cardiff City
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
24
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
34
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
69
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-35
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
34
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Fulham FC
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
34
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
81
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-47
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Huddersfield Town
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
28
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
22
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
76
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-54
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;finallevels &amp;lt;- as.character(uk18_filt$team)
uk18$team &amp;lt;- factor(uk18$team, levels = finallevels)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also create a color palette which fits to your needs.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# We need a color palette with 20 colors
colorCount &amp;lt;- length(unique(uk18$team))
# colorRampPalette creatas a getPalette() function
# This can modify an existing palette to include as many colors we want
getPalette &amp;lt;- colorRampPalette(brewer.pal(9, &amp;quot;Set1&amp;quot;))
getPalette(colorCount)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;#E41A1C&amp;quot; &amp;quot;#9B445D&amp;quot; &amp;quot;#526E9F&amp;quot; &amp;quot;#3C8A9B&amp;quot; &amp;quot;#469F6C&amp;quot; &amp;quot;#54A453&amp;quot; &amp;quot;#747B78&amp;quot;
##  [8] &amp;quot;#94539E&amp;quot; &amp;quot;#BD6066&amp;quot; &amp;quot;#E97422&amp;quot; &amp;quot;#FF990A&amp;quot; &amp;quot;#FFCF20&amp;quot; &amp;quot;#FAF632&amp;quot; &amp;quot;#D4AE2D&amp;quot;
## [15] &amp;quot;#AF6729&amp;quot; &amp;quot;#BF6357&amp;quot; &amp;quot;#E17597&amp;quot; &amp;quot;#E884B9&amp;quot; &amp;quot;#C08EA9&amp;quot; &amp;quot;#999999&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Plot season timeline using the palette we just created
uk &amp;lt;- ggplot(uk18, aes(x=week, y=points, col=team)) + geom_point(size=3) + theme(text = element_text(size=15)) + scale_color_manual(values =getPalette(colorCount))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s plot the regression lines&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Plot season timeline
uk &amp;lt;- ggplot(uk18, aes(x=week, y=points, col=team)) + geom_smooth(se=TRUE) + theme(text = element_text(size=15)) + scale_color_manual(values =getPalette(colorCount))
uk&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using method = &amp;#39;loess&amp;#39; and formula &amp;#39;y ~ x&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-10-data-preparation-web-scraping-data-tables-with-rvest_files/figure-html/Season%20timeline%20linear%20model-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;uk_facet &amp;lt;- ggplot(uk18, aes(x=week, y=points, col=team)) + geom_smooth(se=FALSE) + theme(text = element_text(size=10)) + scale_color_manual(values =getPalette(colorCount)) + facet_wrap(ncol = 4, team~.)

uk_facet&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using method = &amp;#39;loess&amp;#39; and formula &amp;#39;y ~ x&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-10-data-preparation-web-scraping-data-tables-with-rvest_files/figure-html/Season%20timeline%20linear%20model-2.png&#34; width=&#34;672&#34; /&gt;
Some insights from the plots:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;I see three clusters here. Two teams (Man. City and Liverpool) competed head to head for the championship and next three teams (Chelsea, Tottenham and Arsenal) for the 3rd position.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;We can predict 4 out of 5 teams which will take first 5 place at the end of the season early as week 10.&lt;/li&gt;
&lt;li&gt;Manchester United showed peak performance mid season, Everton have improved performances while Tottenham slowed down (which costed them 3rd position) in the second part of the season.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I can plot Points and goal differences in the same plot. I cam see sa,e 3 clusters here as well.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;uk &amp;lt;- ggplot(uk18, aes(x=difference, y=points, col=team)) + 
  geom_point(size=2) + scale_color_manual(values =getPalette(colorCount)) + 
  theme(text = element_text(size=15))
uk&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-10-data-preparation-web-scraping-data-tables-with-rvest_files/figure-html/points%20vs%20goal%20differences-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let’s visualize this in a small animation. You can create an animated plot of the teams progress during the season. Gganimate does good job.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Add a shadow tail
# anim + shadow_wake(wake_length = 0.3, alpha = FALSE)
 
anim &amp;lt;- uk + 
             transition_time(week) + 
             labs(title = &amp;quot;week: {round(frame_time,0)}&amp;quot;) + 
             shadow_wake(wake_length = 0.1, alpha = 0.5)

fullanimation &amp;lt;- animate(anim, fps= 7, nframes=100, 
                         height=500, width=800, res=0.8)

fullanimation&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-10-data-preparation-web-scraping-data-tables-with-rvest_files/figure-html/gganimate-1.gif&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusions-future-thoughts&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Conclusions / Future Thoughts&lt;/h1&gt;
&lt;p&gt;One of the most important steps to answer a research question is gathering and pre-processing data that fits best for the planned analysis.&lt;/p&gt;
&lt;p&gt;Some of the questions we tackled were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to find the &lt;strong&gt;XPath&lt;/strong&gt; for an &lt;strong&gt;html table&lt;/strong&gt; in a website?&lt;/li&gt;
&lt;li&gt;How to &lt;strong&gt;combine data frames&lt;/strong&gt; from &lt;strong&gt;a list&lt;/strong&gt;?&lt;/li&gt;
&lt;li&gt;How to &lt;strong&gt;split columns&lt;/strong&gt; containing more than one variable?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The earliest time, we can predict top teams final positions was around 10th. We can collect data from previous years or compare other countries leagues to check if we can generalize this finding.&lt;/p&gt;
&lt;p&gt;What else we can asK? For example, we can connect performance changes to new transfers. Or whether changing coaches benefited any team.&lt;/p&gt;
&lt;p&gt;Please share if you have other ideas in the comments below!&lt;/p&gt;
&lt;p&gt;Until next time!&lt;/p&gt;
&lt;p&gt;Serdar&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>What is aesthetics and attributes in ggplot&#39;s world?</title>
      <link>/r/ggplot-shiny-app/</link>
      <pubDate>Tue, 08 Oct 2019 00:00:00 +0000</pubDate>
      <guid>/r/ggplot-shiny-app/</guid>
      <description>


&lt;p&gt;ggplot2 is a powerful data visualization tool of R. Make quick visualizations to explore or share your insights.&lt;/p&gt;
&lt;p&gt;Learning how aesthetics and attributes are defined in ggplot will give you an edge to develop your skills quickly.&lt;/p&gt;
&lt;div id=&#34;ggplot2-tips-distinction-between-aesthetics-and-attributes&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;ggplot2 tips: distinction between aesthetics and attributes&lt;/h3&gt;
&lt;p&gt;Aesthetics are defined inside &lt;strong&gt;aes()&lt;/strong&gt; in ggplot syntax and attributes are outside the aes().&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;e.g. ggplot(data, aes(x, y, &lt;strong&gt;color=var1&lt;/strong&gt;) + geom_point&lt;strong&gt;(size=6)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We typically understand &lt;strong&gt;aesthetics&lt;/strong&gt; as how something looks, color, size etc.&lt;br /&gt;
But in ggplot’s world how things look is just an &lt;strong&gt;attribute.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Aesthetics does not refer how something looks, &lt;strong&gt;but to which variable is mapped onto it.&lt;/strong&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;I will create an imaginary data frame to apply those concepts.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
points &amp;lt;- 500
# Defining the Golden Angle
angle &amp;lt;- pi*(3-sqrt(5))
t &amp;lt;- (1:points) * angle
x &amp;lt;- sin(t/2)
y &amp;lt;-cos(t/2)
z &amp;lt;- rep(c(1,2,3,4,5,6,7,8,9,10), times=50)
w &amp;lt;- rep(c(1,2), times=250)
df &amp;lt;- data.frame(t, x, y, z, w)
# Have a look at the data
head(df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           t          x           y z w
## 1  2.399963  0.9320324  0.36237489 1 1
## 2  4.799926  0.6754903 -0.73736888 2 2
## 3  7.199890 -0.4424710 -0.89678282 3 1
## 4  9.599853 -0.9961710  0.08742572 4 2
## 5 11.999816 -0.2795038  0.96014460 5 1
## 6 14.399779  0.7936008  0.60843886 6 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The dataframe we created has 3 numeric (t, x, y) variables and 2 discrete variables (z, w). With ggplot2 I can map any of the variables on my plot by defining them inside the &lt;strong&gt;aes().&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Make a scatter plot of points of a spiral
p &amp;lt;- ggplot(df, aes(x*t, y*t))
p + geom_point()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-08-what-is-aesthetics-and-atributes-in-ggplot-s-world_files/figure-html/ggplot%20main%20spiral-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;example-use-of-an-aesthetics&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Example use of an aesthetics&lt;/h3&gt;
&lt;p&gt;By defining col=factor(z) inside aes(), I can map z to colors. So now the graph shows x, y and also values z.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Make a scatter plot of points in a spiral
p &amp;lt;- ggplot(df, aes(x*t, y*t, col=factor(z)))
p + geom_point()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-08-what-is-aesthetics-and-atributes-in-ggplot-s-world_files/figure-html/Map%20z%20on%20color-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Each different color now represents different values of z.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;example-use-of-an-attribute&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Example use of an attribute&lt;/h3&gt;
&lt;p&gt;Attribute is how somethings looks. e.g. you can the points bigger by defining size=4. But it does not give any extra information about data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Make a scatter plot of points in a spiral
p &amp;lt;- ggplot(df, aes(x*t, y*t, col=factor(z)))
p + geom_point(size = 4)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-08-what-is-aesthetics-and-atributes-in-ggplot-s-world_files/figure-html/main%20spiral%20colored-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;use-shape-as-an-attribute&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Use shape as an attribute&lt;/h3&gt;
&lt;p&gt;Same goes here. I am changing how something looks like. The data point shape change to 24 which defines a filled triangle. But nothing is mapped onto it. It is just an attribute.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Make a scatter plot of points in a spiral
p &amp;lt;- ggplot(df, aes(x*t, y*t, color=factor(z)))
p + geom_point(shape=24, size=4)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-08-what-is-aesthetics-and-atributes-in-ggplot-s-world_files/figure-html/spiral%20colors%20with%20triangles-1.png&#34; width=&#34;672&#34; /&gt;
Here, x&lt;em&gt;t, y&lt;/em&gt;t and factor(z) is mapped on to our graph.
### Using shape as an aesthetics&lt;/p&gt;
&lt;p&gt;By defining shape and color inside aes() I can map w and z to my plot as well.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;points &amp;lt;- 500
# Defining the Golden Angle
angle &amp;lt;- pi*(3-sqrt(5))
t &amp;lt;- (1:points) * angle
x &amp;lt;- sin(t)
y &amp;lt;-cos(t)
z &amp;lt;- rep(c(1,2,3,4,5,6,7,8,9,10), times=50)
w &amp;lt;- rep(c(1,2), times=250)
df &amp;lt;- data.frame(t, x, y, z, w)

p &amp;lt;- ggplot(df, aes(x*t, y*t, shape=factor(w), color=factor(z)))
p + geom_point(size=3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-08-what-is-aesthetics-and-atributes-in-ggplot-s-world_files/figure-html/aa-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Spirals look nice and we got some basics of ggplot. Now let’s use it to create a pattern designer, with Shiny. Many patterns in Nature can be explained by mathematical terms, Shapes of sunflowers, dandelions or snowflakes etc.&lt;/p&gt;
&lt;p&gt;I will tell the rest of the story in the next update. Now you can play with the app to create your patterns!&lt;/p&gt;
&lt;iframe width=&#34;1000&#34; height=&#34;800&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; src=&#34;https://korur.shinyapps.io/designapattern/&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;Until next time!&lt;br /&gt;
Serdar&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
