<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>parallel package | SERDAR KORUR</title>
    <link>/tags/parallel-package/</link>
      <atom:link href="/tags/parallel-package/index.xml" rel="self" type="application/rss+xml" />
    <description>parallel package</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Fri, 15 Nov 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/logo.png</url>
      <title>parallel package</title>
      <link>/tags/parallel-package/</link>
    </image>
    
    <item>
      <title>Speed boosting in R: Writing efficient code &amp; parallel programming</title>
      <link>/r/speed-boosting-in-r-writing-efficient-code-parallel-programming/</link>
      <pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/r/speed-boosting-in-r-writing-efficient-code-parallel-programming/</guid>
      <description>


&lt;div id=&#34;have-more-things-happen-at-once-parallel-programming&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Have more things happen at once: Parallel Programming&lt;/h2&gt;
&lt;p&gt;Parallel processing is about &lt;strong&gt;using multiple cores of your computer’s CPU&lt;/strong&gt; to run multiple tasks simultaneously. This enables you to complete &lt;strong&gt;the same task multiple times quicker!&lt;/strong&gt;&lt;img src=&#34;/img/veri-ivanova-unsplash.jpg&#34; alt=&#34;Photo by Veri Ivanova on Unsplash&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In R, usually computations run sequentially. When we initiate multiple tasks they are performed one after the other, new task starts only after the previous one is completed.&lt;/p&gt;
&lt;p&gt;This might become the bottleneck when you come across a computationally heavy process. Such as running monte carlo simulations or fitting multiple machine learning models.&lt;strong&gt;Typically, if I have a process which runs longer than 3 minutes, I consider using parallel processing.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It might sound complicated but parallel computing is simple. When you have a repetitive task which takes too much of your valuable time why not implement it and &lt;strong&gt;save time?&lt;/strong&gt; Even if you have a single task, you can benefit from parallel processing by &lt;strong&gt;dividing the task into smaller pieces.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Two widely used packages for parallel processing are &lt;a href=&#34;https://stat.ethz.ch/R-manual/R-devel/library/parallel/doc/parallel.pdf&#34;&gt;parallel&lt;/a&gt; and &lt;a href=&#34;foreach%20cran%20page&#34;&gt;foreach&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let’s do some parallel processing..&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;what-is-our-goal&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What is our goal?&lt;/h2&gt;
&lt;p&gt;I recently analyzed data from horror movies released in the world between 2012 and 2017. What caught my attention was that movies are more likely to be released at the 13th of each month. You can visit my recent &lt;a href=&#34;https://dataatomic.com/r/probability-distributions/&#34;&gt;post&lt;/a&gt; if you want to know more about this data.&lt;/p&gt;
&lt;div id=&#34;lets-get-the-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Let’s get the data&lt;/h3&gt;
&lt;p&gt;There are 2782 movies released in one of the 30 days (categories). The resulting table below shows the days of the month and how many movies released at that day.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse) # ggplot2, dplyr, tidyr, readr, 
                   # purrr, tibble, stringr, forcats&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;horror_movies &amp;lt;- readr::read_csv(&amp;quot;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-10-22/horror_movies.csv&amp;quot;)

dim(horror_movies)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3328   12&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;horror_date &amp;lt;-  horror_movies %&amp;gt;% 
                separate(
                  release_date, 
                  c(&amp;quot;day&amp;quot;, &amp;quot;month&amp;quot;, &amp;quot;year&amp;quot;),
                  sep = &amp;quot;-&amp;quot;)

horror_date$day &amp;lt;- as.numeric(horror_date$day)

# Remove rows without Date of the month

horror_date &amp;lt;- horror_date %&amp;gt;% filter(day &amp;lt; 32) 

# I am excluding Day 1 from the analysis (Most aggreements starts at 1st)

horror_date_table &amp;lt;- horror_date %&amp;gt;% filter(day &amp;gt; 1)

# let&amp;#39;s check what is the most common day in the month for a horror movie release
data &amp;lt;-  horror_date_table %&amp;gt;%
  group_by(day) %&amp;gt;% 
  count() %&amp;gt;% 
  arrange(desc(n))

data %&amp;gt;% print(n=30)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 30 x 2
## # Groups:   day [30]
##      day     n
##    &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;
##  1    13   124
##  2    18   119
##  3    25   119
##  4    21   110
##  5    31   107
##  6    28   102
##  7    10   100
##  8    20   100
##  9     5    99
## 10     7    98
## 11     2    95
## 12    29    94
## 13    14    91
## 14    12    90
## 15    24    90
## 16     8    88
## 17    15    88
## 18    17    88
## 19    16    87
## 20     3    86
## 21     4    86
## 22     6    86
## 23     9    85
## 24    22    85
## 25    26    84
## 26    11    83
## 27    27    82
## 28    19    77
## 29    30    74
## 30    23    65&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I will simulate 1 million multinomial trials of distributing 2782 movies to 30 days of the month. This type of distributions (k &amp;gt; 2) are called &lt;strong&gt;multinomial distributions.&lt;/strong&gt;xx`&lt;/p&gt;
&lt;p&gt;I created a function to find p values for each day. But it takes sometime to run. I will try to improve the runtime by &lt;strong&gt;optimizing my code&lt;/strong&gt; and &lt;strong&gt;using parallel processing.&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;multfun &amp;lt;- function(x){ 
  a &amp;lt;- list()
  avc &amp;lt;- rmultinom(1000000, size=2782, prob=rep(1/30, 30))  # Create probability matrix
  for (i in 1:30){ a[[i]] &amp;lt;- mean(avc[i,1:1000000] &amp;gt;=x) }   # Find probabilities for each day
  ifelse(do.call(sum,a)/30 &amp;lt;= 0.5, p_val &amp;lt;-  2 * do.call(sum,a)/30, 
                                   p_val &amp;lt;- 2*(1 - do.call(sum,a)/30))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;multfun() uses rmultinom() function to produce a matrix of monte carlo simulations of 1.000.000 random multinomial distributions with 30 categories. Then calculates total probabilities of any given observation or rarer events at each day from this matrix.&lt;/p&gt;
&lt;p&gt;This actually translates into the p value for a given (n) observation.
For example, when I run multfun(124), It will give me the p value for observing a day with at least 124 movie releases.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Run an example
multfun(124)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.001844267&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To calculate the p values for the top 5 days with highest number of movie releases, I can run multfun() multiple times for each value.&lt;/p&gt;
&lt;div id=&#34;execute-the-multfun-function-multiple-times&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Execute the multfun() function multiple times&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;system.time({
multfun(124)
multfun(119)
multfun(110)
multfun(107)
multfun(102)
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    user  system elapsed 
##   15.72    0.21   15.94&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For few values it can be ok, but easier methods exist if you need to run your function repetitvely for a bigger number of inputs.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;using-lapply-function&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Using lapply() function&lt;/h4&gt;
&lt;p&gt;Instead of running a function for different input values several times, you can use lapply() function. &lt;strong&gt;It loops over a given vector or list input (l in lapply comes from list), and applies the input function to each element in that list.&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;system.time({
lapply(c(124,119,119,197,102), multfun)
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    user  system elapsed 
##   15.64    0.29   15.92&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;using-parallel-package-functions-parlapply&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Using parallel package functions: parLapply()&lt;/h2&gt;
&lt;p&gt;If you have ever used any of lapply() or sapply function you are halfway in parallel processing.&lt;/p&gt;
&lt;div id=&#34;preparation-for-parallel-processing&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Preparation for parallel processing&lt;/h3&gt;
&lt;p&gt;You can use &lt;strong&gt;detectCores()&lt;/strong&gt; function to find out how many cores are available in your CPU.&lt;/p&gt;
&lt;p&gt;Then, to create the clusters required apply &lt;strong&gt;makeCluster()&lt;/strong&gt; with the number of cores you intend to use. In my computer, I have 6 cores and I will assign 5 cores as the multiple workers.&lt;/p&gt;
&lt;div id=&#34;parallel-processing-parlapply&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Parallel processing: parLapply&lt;/h4&gt;
&lt;p&gt;parLapply is the easiest way to parallelise computation. You first need to replace lapply with parLapply and enter an extra cluster argument.&lt;/p&gt;
&lt;p&gt;Then, an additional preparation step to create the clusters required. &lt;strong&gt;makeCluster()&lt;/strong&gt; function creates the number of cluster that you intend to use. In my computer, I have 6 cores and I will assign 5 cores as the multiple workers.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(parallel)
system.time({
n_cores &amp;lt;- detectCores(logical=FALSE)
cl &amp;lt;- makeCluster(n_cores-1)
parLapply(cl , c(124,119,119,197,102), multfun)
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    user  system elapsed 
##    0.02    0.01    4.54&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stopCluster(cl)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When done, include stopCluster() argument to avoid running R sessions in different clusters in the background.&lt;/p&gt;
&lt;p&gt;Theoretically, I can expect 5X quicker processing with 5 cores. But there are overhead costs. Additional preparation steps such as makecluster() function also takes time.&lt;/p&gt;
&lt;p&gt;We had much quicker execution by parallel processing. Is there a room for further improvement?&lt;/p&gt;
&lt;p&gt;Let’s look at our multfun function again…&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;multfun &amp;lt;- function(x){ 
  a &amp;lt;- list()
  avc &amp;lt;- rmultinom(1000000, size=2782, prob=rep(1/30, 30))  # Create probability matrix
  for (i in 1:30){ a[[i]] &amp;lt;- mean(avc[i,1:1000000] &amp;gt;=x) }   # Find probabilities for each day
  ifelse(do.call(sum,a)/30 &amp;lt;= 0.5, p_val &amp;lt;-  2 * do.call(sum,a)/30, 
                                   p_val &amp;lt;- 2*(1 - do.call(sum,a)/30))
                       }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In R, it is possible to do things in multiple ways. Sometimes we need more readable version and sometimes just fast code. I see that multfun uses a list and a for loop. If I find a way without using them I can get a faster run.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;improved-multfun-define-the-function-without-using-a-loop-and-list&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Improved multfun: Define the function without using a loop and list&lt;/h2&gt;
&lt;p&gt;Mean function in R can be vectorized instead of looping.&lt;/p&gt;
&lt;p&gt;I can achieve the same result what the first multfun() was doing by including what for loop was doing inside the “[ ]”. Mean function will be applied find the total proportion of values equal or bigger than &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;multfun_opt &amp;lt;- function(x){ 
  avc &amp;lt;- rmultinom(1000000, size=2782, rep(1/30, 30))
  p &amp;lt;- mean(avc[1:30, 1:1000000] &amp;gt;=x)
  ifelse(p &amp;lt;= 0.5, p_val &amp;lt;-  2 * p, p_val &amp;lt;- 2*(1 - p))}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s check whether improved multfun is faster.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;system.time({
n_cores &amp;lt;- detectCores(logical=FALSE)
cl &amp;lt;- makeCluster(n_cores-1)
parLapply(cl , c(124,119,119,197,102), multfun_opt)
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    user  system elapsed 
##    0.00    0.06    4.32&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stopCluster(cl)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since rmultinom is the bottleneck here, we did not see very big improvement in overall function. We got 10-20% improvement. But it is good to know, what we can improve when we really need it.&lt;/p&gt;
&lt;p&gt;Let’s compare only the part of the function which uses the vectorized operation and the one with for loop.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;avc &amp;lt;- rmultinom(1000000, size=2782, prob=rep(1/30, 30)) 
a &amp;lt;- list()

system.time({
  for (i in 1:30){ a[[i]] &amp;lt;- mean(avc[i,1:1000000] &amp;gt;=124) }  
  ifelse(do.call(sum,a)/30 &amp;lt;= 0.5, p_val &amp;lt;-  2 * do.call(sum,a)/30, 
                                   p_val &amp;lt;- 2*(1 - do.call(sum,a)/30)) })&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    user  system elapsed 
##    0.41    0.01    0.42&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;system.time({
    p &amp;lt;- mean(avc[1:30, 1:1000000] &amp;gt;=124)
  ifelse(p &amp;lt;= 0.5, p_val &amp;lt;-  2 * p, p_val &amp;lt;- 2*(1 - p)) })&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    user  system elapsed 
##    0.22    0.02    0.24&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vectorised version is twice faster!!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;further-improvement&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Further Improvement&lt;/h2&gt;
&lt;p&gt;You can use Rprof() function to profile your process, it will return how much time each subprocess takes time.
Let’s profile our function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;multfun_opt &amp;lt;- function(x){ 
  avc &amp;lt;- rmultinom(1000000, size=2782, rep(1/30, 30))
  p &amp;lt;- mean(avc[1:30, 1:1000000] &amp;gt;=x)
  ifelse(p &amp;lt;= 0.5, p_val &amp;lt;-  2 * p, p_val &amp;lt;- 2*(1 - p))
  }

Rprof()
multfun_opt(124)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.0018542&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Rprof(NULL)

summaryRprof()$by.self&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                self.time self.pct total.time total.pct
## &amp;quot;rmultinom&amp;quot;         1.80    93.75       1.80     93.75
## &amp;quot;&amp;gt;=&amp;quot;                0.08     4.17       0.08      4.17
## &amp;quot;mean&amp;quot;              0.02     1.04       0.12      6.25
## &amp;quot;mean.default&amp;quot;      0.02     1.04       0.02      1.04&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In profile summary, &lt;strong&gt;total.pct&lt;/strong&gt; shows the total percentage of the duration of each task inside the function. We can see that &lt;strong&gt;rmultinom()&lt;/strong&gt; part of takes more than 90% of the processing time.&lt;/p&gt;
&lt;p&gt;If we are looking further improvement we can focus on it. To improve rmultinom() part, I will isolate it by splitting the multfun into two functions.&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    In general, to be able to apply parallel processing we need to be able to dispatch our tasks as functions, with one task going to each processor. We can apply parLapply to execute multiple functions at the same time.
  &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Above, first improvement was using parLapply instead of lapply and second replacing a loop with a faster vectorized operation. Now, we will utilize another approach, dividing a task into smaller pieces.&lt;/p&gt;
&lt;p&gt;I need to create a new rmultinom() function, which I call fastbinom. To keep things simple, it will take only one argument which I will use &lt;strong&gt;to divide 1.000.000 rmultinom simulations into 5 equal parts of 200.000 rmultinom simulations.&lt;/strong&gt; Each will be handled by a different core in my CPU boosting my speed.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fastbinom &amp;lt;- function(x) {
  rmultinom(x, size=2782, rep(1/30,30)) 
}

multfun_fin &amp;lt;- function(x){ 
  p &amp;lt;- mean(avc[1:30, 1:1000000] &amp;gt;=x)
  ifelse(p &amp;lt;= 0.5, p_val &amp;lt;-  2 * p, p_val &amp;lt;- 2*(1 - p))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here comes an additional overhead. Since, multfun_fin will be executed on different cores, we need to export the data to each cluster. Windows rely on &lt;strong&gt;clusterExport()&lt;/strong&gt; for data to be copied to each cluster.&lt;/p&gt;
&lt;p&gt;Test the final optimized code.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Final optimized code 
system.time({
cl &amp;lt;- makeCluster(5)
avc &amp;lt;- parLapply(cl , c(200000, 200000, 200000, 200000, 200000), fastbinom)
avc &amp;lt;- do.call(cbind, avc)
clusterExport(cl, varlist=&amp;quot;avc&amp;quot;, envir=environment())
parLapply(cl, c(124,119,119,197,102), multfun_fin)
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    user  system elapsed 
##    0.60    0.61    3.05&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stopCluster(cl)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Quite a bit improvement!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;final-test&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Final test&lt;/h1&gt;
&lt;p&gt;Let’s now put things together, I will test different versions I created so far. But this time for more input values, I will use my function for each of the 30 categories and by using up to 1.000.000 simulations.&lt;/p&gt;
&lt;p&gt;Let’s call the initial version: &lt;code&gt;original&lt;/code&gt;, second &lt;code&gt;parLapply&lt;/code&gt;, third &lt;code&gt;parLapply, optimized&lt;/code&gt; and the last &lt;code&gt;parLapply/fastbinom&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;multfun &amp;lt;- function(x){ 
  a &amp;lt;- list()
  avc &amp;lt;- rmultinom(1000000, size=2782, prob=rep(1/30, 30))  # Create probability matrix
  for (i in 1:30){ a[[i]] &amp;lt;- mean(avc[i,1:1000000] &amp;gt;=x) }   # Find probabilities for each day 
  ifelse(do.call(sum,a)/30 &amp;lt;= 0.5, p_val &amp;lt;-  2 * do.call(sum,a)/30, 
                                   p_val &amp;lt;- 2 * (1 - do.call(sum,a)/30))
}


# Original
system.time({
lapply(data$n, multfun)
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    user  system elapsed 
##   92.37    1.43   93.82&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# parLapply
system.time({
n_cores &amp;lt;- detectCores(logical=FALSE)
cl &amp;lt;- makeCluster(n_cores-1)
parLapply(cl , data$n, multfun)
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    user  system elapsed 
##    0.03    0.03   24.97&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stopCluster(cl)

multfun_opt &amp;lt;- function(x){ 
  avc &amp;lt;- rmultinom(1000000, size=2782, rep(1/30, 30))
  p &amp;lt;- mean(avc[1:30, 1:1000000] &amp;gt;=x)
  ifelse(p &amp;lt;= 0.5, p_val &amp;lt;-  2 * p, p_val &amp;lt;- 2*(1 - p))
  }

# parLapply, optimized
system.time({
n_cores &amp;lt;- detectCores(logical=FALSE)
cl &amp;lt;- makeCluster(n_cores-1)
parLapply(cl , data$n, multfun_opt)
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    user  system elapsed 
##    0.00    0.03   21.75&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stopCluster(cl)

multfun_fin &amp;lt;- function(x){ 
  p &amp;lt;- mean(avc[1:30, 1:1000000] &amp;gt;=x)
  ifelse(p &amp;lt;= 0.5, p_val &amp;lt;-  2 * p, p_val &amp;lt;- 2*(1 - p))
}

# parLapply, fastbinom
system.time({
cl &amp;lt;- makeCluster(5)
avc &amp;lt;- parLapply(cl , c(200000, 200000, 200000, 200000, 200000), fastbinom)
avc &amp;lt;- do.call(cbind,avc)
clusterExport(cl, varlist=&amp;quot;avc&amp;quot;, envir=environment())
parLapply(cl, data$n, multfun_fin)
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    user  system elapsed 
##    0.56    0.60    4.10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stopCluster(cl)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is an additonal comparision, testing time differences between different versions and to be more precise I simulated up to 10.000.000 multinomial distributions.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(readxl)
library(tidyverse)
library(viridis)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: viridisLite&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;speedtest &amp;lt;- read_excel(&amp;quot;posts_data/parallelprocessing_speed_tests.xlsx&amp;quot;, sheet =3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## New names:
## * `` -&amp;gt; ...1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;speedtest &amp;lt;- speedtest[-1]
spd &amp;lt;- gather(speedtest, version, seconds, -c(rmultinom,n))
spd$version &amp;lt;- factor(spd$version, labels = c(&amp;quot;original&amp;quot;, &amp;quot;parlapply&amp;quot;, &amp;quot;parLapply/opt&amp;quot;, &amp;quot;parLapply/fastbinom&amp;quot;))

spdplot &amp;lt;- spd %&amp;gt;% filter(n &amp;gt;5) %&amp;gt;% 
  ggplot(aes(x=rmultinom, y=seconds, color=version)) + 
  geom_line() + 
  theme(text = element_text(size=18)) +
   labs(  x = &amp;quot;Number of simulations&amp;quot;, 
          y = &amp;quot;Time (seconds)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;spdplot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-11-15-speed-boosting-in-r-writing-efficient-code-parallel-programming_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;spd %&amp;gt;% filter(rmultinom ==10000000, n &amp;gt;5) %&amp;gt;%
  ggplot(aes(x=version, y=seconds)) + geom_col() + 
  theme(text = element_text(size=15)) + 
  geom_label(aes(label = seconds), alpha = 0.5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-11-15-speed-boosting-in-r-writing-efficient-code-parallel-programming_files/figure-html/unnamed-chunk-7-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;By splitting our original function into two and then applying parallel processing for each subtask we achieved more than 30X speed gain.&lt;/p&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Parallel processing is easy and can get your tasks extremely faster.&lt;/p&gt;
&lt;p&gt;Until next time!&lt;/p&gt;
&lt;p&gt;Serdar&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
