<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>data wrangling | SERDAR KORUR</title>
    <link>/tags/data-wrangling/</link>
      <atom:link href="/tags/data-wrangling/index.xml" rel="self" type="application/rss+xml" />
    <description>data wrangling</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Wed, 23 Oct 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/logo.png</url>
      <title>data wrangling</title>
      <link>/tags/data-wrangling/</link>
    </image>
    
    <item>
      <title>#TidyTuesday: Which are the best family cars for your weekend trip?</title>
      <link>/r/tidytuesday-which-are-the-best-family-cars/</link>
      <pubDate>Wed, 23 Oct 2019 00:00:00 +0000</pubDate>
      <guid>/r/tidytuesday-which-are-the-best-family-cars/</guid>
      <description>


&lt;p&gt;This week, I will analyze Car Fuel Economy &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/tree/master/data/2019/2019-10-15&#34;&gt;dataset&lt;/a&gt; from TidyTuesday.&lt;/p&gt;
&lt;div id=&#34;what-is-tidytuesday&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What is TidyTuesday?&lt;/h2&gt;
&lt;p&gt;TidyTuesday is a weekly social data project in R organized by the &lt;a href=&#34;https://thomasmock.netlify.com/post/tidytuesday-a-weekly-social-data-project-in-r/&#34;&gt;R for Data Science community&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is a great way of improving your Data wrangling and visualization techniques, &lt;strong&gt;sharing and learning from others&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You can find more information on their &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Fuel economy &lt;a href=&#34;https://www.fueleconomy.gov/feg/download.shtml&#34;&gt;data&lt;/a&gt; are the result of the work done by the US Environmental Protection Agency. Full data dictionary can be found at &lt;a href=&#34;https://www.fueleconomy.gov/feg/ws/index.shtml#fuelType1&#34;&gt;fueleconomy.gov&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The data contains 83 parameters of more than 40.000 Vehicles. That’s a lot of information!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;going-for-your-next-family-camping-adventure-first-check-your-car-model.&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Going for your next family camping adventure? First, check your car model.&lt;/h1&gt;
&lt;p&gt;Better Fuel economy and recent developments on longer running electric car batteries are great. But one thing which does not change in families’ lives is the &lt;strong&gt;need for space&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If you don’t want crying kids running around because of &lt;strong&gt;a missing teddy bear&lt;/strong&gt; which did not fit in the baggage. Check, which brands will serve you best.&lt;/p&gt;
&lt;p&gt;Especially, if you have a daughter who likes to travel with a lot of toys.&lt;img src=&#34;/img/raisa.jpg&#34; alt=&#34;raisa.jpg&#34; /&gt;&lt;br /&gt;
Let’s figure out a solution for peaceful weekend trip.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;which-brand-produce-most-family-friendly-cars-in-terms-of-baggage-volume.&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Which brand produce most family friendly cars? In terms of baggage volume.&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse) # ggplot2, dplyr, tidyr, readr, 
                   # purrr, tibble, stringr, forcats
big_epa_cars &amp;lt;- read_csv(&amp;quot;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-10-15/big_epa_cars.csv&amp;quot;)
dim(big_epa_cars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 41804    83&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I will subset my data for easier computation.&lt;/p&gt;
&lt;p&gt;Let’s keep the following columns:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;year - model year&lt;/li&gt;
&lt;li&gt;make - manufacturer (division)&lt;/li&gt;
&lt;li&gt;model - model name (carline)&lt;/li&gt;
&lt;li&gt;VClass - EPA vehicle size class&lt;/li&gt;
&lt;li&gt;hlv - hatchback luggage volume (cubic feet)&lt;/li&gt;
&lt;li&gt;hpv - hatchback passenger volume (cubic feet)&lt;/li&gt;
&lt;li&gt;displ - engine displacement in liters&lt;/li&gt;
&lt;li&gt;lv4 - 4 door luggage volume (cubic feet)&lt;/li&gt;
&lt;li&gt;pv4 - 4-door passenger volume&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;big_sub &amp;lt;- big_epa_cars %&amp;gt;% 
  select(fuelType, year, make, model, VClass, hlv, hpv,lv4,pv4,displ)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I will start exploring the data. For the moment, first I will focus on &lt;strong&gt;Midsize cars&lt;/strong&gt; (VClass).&lt;/p&gt;
&lt;p&gt;I will filter for the main pool of Midsize cars with 4 door and luggage volume of bigger than 6 and passenger volume larger than 75.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;posn.j &amp;lt;- position_jitter(width=0.2)
big_sw &amp;lt;- big_sub %&amp;gt;% 
  filter(VClass == &amp;quot;Midsize Cars&amp;quot; &amp;amp; pv4 &amp;gt; 75 &amp;amp; lv4 &amp;gt; 6) 

big_sw %&amp;gt;%
  ggplot(aes(x=pv4, y=lv4)) + 
  geom_point(shape=21,
             alpha=0.4,size =3, 
             position = posn.j) + 
  theme(plot.caption=element_text(size=11), 
        text = element_text(size=18),
        plot.title = element_text(size=32), 
        legend.position = &amp;quot;none&amp;quot;) +
  geom_smooth(method = &amp;quot;lm&amp;quot;, color =&amp;quot;red&amp;quot;) + 
  coord_fixed() +
    labs(x = &amp;quot;Passenger Vol (Cubic feet)&amp;quot;, 
         y = &amp;quot;Luggage Vol (Cubic feet)&amp;quot;, 
         title = 
    &amp;quot;Luggage space negatively \ncorrelates with passenger space&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-23-tidytuesday-which-are-the-best-family-cars_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;1152&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This is not unexpected. But good to see.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Insight 1: Negative correlation suggests that producers sacrifice passenger space to produce bigger room for the luggage or vice versa.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;First, I will look at the luggage volume in Mid sized cars and I will order them according to highest average.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pp &amp;lt;- big_sw %&amp;gt;% 
  mutate(make = fct_reorder(make, lv4)) %&amp;gt;%
  ggplot(aes(x=make, y=lv4, col=make)) + 
  geom_boxplot(varwidth=TRUE) +
  theme(plot.caption=element_text(size=11), 
        text = element_text(size=18),    
        plot.title = element_text(size=32), 
        legend.position = &amp;quot;none&amp;quot;) +
  coord_flip() + 
  labs(x = element_blank(), 
       y = &amp;quot;Luggage size (cubic feet)&amp;quot;, 
       title = &amp;quot;Average luggage volumes in Midsized cars&amp;quot;)
  pp&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-23-tidytuesday-which-are-the-best-family-cars_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;1152&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If you follow the mean lines from bottom to top, you will see that cars cluster into three groups according to their mean of luggage sizes. But differences are not huge.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Insight 2: Cars cluster into three groups according to their mean luggage size.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let’s focus. I am looking for the car with the biggest luggage space. Let’s see what other VClass types are in our dataset that we can include our exploration.&lt;/p&gt;
&lt;p&gt;There are 34 types of vehicle classes (Vlass) in our dataset. I will subset all the relevant ones, leaving some specialty vehicles and vans aside.&lt;/p&gt;
&lt;p&gt;You can have a look at other VClass types with this code here.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;big_epa_cars %&amp;gt;% group_by(VClass) %&amp;gt;% count() %&amp;gt;% arrange(desc(n))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I will also remove minor brands with less than 10 models in total.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;big_filtered &amp;lt;- big_sub %&amp;gt;% 
  filter(VClass %in% c(&amp;quot;Large Cars&amp;quot;, &amp;quot;Compact Cars&amp;quot;, &amp;quot;Midsize Cars&amp;quot;, 
                       &amp;quot;Midsize Station Wagons&amp;quot;, &amp;quot;Midsize-Large Station Wagons&amp;quot;,
                       &amp;quot;Minivan - 2WD&amp;quot;, &amp;quot;Minivan - 4WD&amp;quot;)) %&amp;gt;% 
  group_by(make) %&amp;gt;% 
  mutate(n=n()) %&amp;gt;% 
  filter(n &amp;gt; 10) %&amp;gt;% 
  ungroup()

dim(big_filtered)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 14710    11&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To be on the safe side for the family trip, I will choose cars not older than 5 years.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Cars ordered with luggage volume, but not older than 5 years 
# and lv4 bigger than 5

q &amp;lt;- big_filtered %&amp;gt;% 
  filter(year &amp;gt; 2016, lv4 &amp;gt; 5) %&amp;gt;%
  mutate(make = fct_reorder(make, lv4)) %&amp;gt;%
  ggplot(aes(x=make, y=lv4, col=make)) + 
  geom_boxplot(varwidth=TRUE) +
  theme(text = element_text(size=15),
        legend.position = &amp;quot;none&amp;quot;) +
  coord_flip()
q&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-23-tidytuesday-which-are-the-best-family-cars_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There are not big differences between average luggage size of different brands. Although, you will probably get more space if you choose a Volkswagen or Ford rather than a BMW or Chevrolet.&lt;/p&gt;
&lt;p&gt;The real XL luggage volume cars are plenty and seem to be more outlier models. To find our dream car let’s focus on those outliers.&lt;/p&gt;
&lt;p&gt;I will create a new data frame &lt;strong&gt;boot_space&lt;/strong&gt; containing the top 50 cars according to the luggage volume.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;boot_space &amp;lt;- big_filtered %&amp;gt;% 
  filter(year &amp;gt; 2016) %&amp;gt;% 
  arrange(desc(lv4)) %&amp;gt;% 
  top_n(50, lv4)

# Top family cars - geom_point()
bs &amp;lt;- boot_space %&amp;gt;% 
  mutate(model = fct_reorder(model, lv4)) %&amp;gt;%
  mutate(make = fct_reorder(make, lv4)) %&amp;gt;% 
  ggplot(aes(x=make,y= model, size=lv4, col=VClass)) + 
  geom_point() +
  theme(plot.caption=element_text(size=12),
        axis.text.x=element_text(angle=45, hjust=1),
        text = element_text(size=18), 
        plot.title = element_text(size=32)) +
labs(caption= &amp;quot;Data: https://fueleconomy.gov&amp;quot;, 
     size=&amp;quot;Luggage Vol\n(Cubic feet)&amp;quot;,
     x = element_blank(), 
     y = element_blank(), 
     title = &amp;quot;Which are the best family cars?&amp;quot;) + 
  guides(size = guide_legend(order = 1), 
         shape = guide_legend(order = 2)) +
  scale_size(range=c(2, 9))
bs&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-23-tidytuesday-which-are-the-best-family-cars_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;1152&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Mercedes AMG GLA45 is the winner with 42 cubic feet space!&lt;/p&gt;
&lt;p&gt;Here is another presentation, for easier comparision.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Top family cars - geom_Col()
bs_col &amp;lt;- boot_space %&amp;gt;% 
    mutate(model = fct_reorder(model, lv4)) %&amp;gt;%
    mutate(make = fct_reorder(make, lv4)) %&amp;gt;% 
    ggplot(aes(x=model, y=lv4, fill=make)) + 
    geom_col(position=&amp;quot;dodge&amp;quot;)+coord_flip() + 
    theme(plot.caption=element_text(size=11), 
          text = element_text(size=18), 
          plot.title = element_text(size=32)) +
labs(caption= &amp;quot;Data source: https://fueleconomy.gov&amp;quot;, 
     size=&amp;quot;Luggage Vol\n(Cubic feet)&amp;quot;, 
     x = element_blank(), 
     y = &amp;quot;Luggage Vol (Cubic feet)&amp;quot;, 
     title = &amp;quot;Which are the best family cars?&amp;quot;) +
    scale_size(range=c(2, 9)) 

bs_col&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-23-tidytuesday-which-are-the-best-family-cars_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;1152&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We found our answer and our camping gear is ready. Let’s tackle some other questions. We hear a lot about them but how does the future looks like for Electric cars?&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;how-do-electric-cars-evolving-in-the-last-years-compared-to-non-electric-cars&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;How do Electric cars evolving in the last years compared to non electric cars?&lt;/h1&gt;
&lt;p&gt;There are many of different types of engines capable of using one or two different fuel sources. Let’s look at how their numbers compare during the last years.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Using Varwidth: Ordered
pp  &amp;lt;- big_epa_cars %&amp;gt;% 
  mutate(fuelType=fct_reorder(fuelType, year)) %&amp;gt;% 
  ggplot(aes(x=fuelType, y =year, fill=fuelType)) + 
  geom_boxplot(varwidth=TRUE) + 
  coord_flip() + 
  theme(legend.position = &amp;quot;none&amp;quot;, 
        text = element_text(size=18), 
        plot.title = element_text(size=32),
        axis.text.x = element_text(angle = 45, hjust = 1)) + 
  labs(x = &amp;quot;Fuel Type&amp;quot;,
       y = &amp;quot;Year&amp;quot;, 
       title = 
         &amp;quot;How does prominence of Fuel Types \nchange with the year?&amp;quot;)

pp&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-23-tidytuesday-which-are-the-best-family-cars_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;1152&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;group-electric-vs-non-electric-cars&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Group Electric vs Non Electric cars&lt;/h3&gt;
&lt;p&gt;I will group cars whehter or not they can use electricity.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Grouped: Electric vs no electric:
big_epa_cars$fuelType &amp;lt;- ifelse(big_epa_cars$fuelType %in%
               c(&amp;quot;Regular Gas and Electricity&amp;quot;,
                &amp;quot;Premium Gas or Electricity&amp;quot;,
                 &amp;quot;Premium and Electricity&amp;quot;, 
                &amp;quot;Regular Gas or Electricity&amp;quot;,
                &amp;quot;Electricity&amp;quot;), &amp;quot;Electric&amp;quot;, &amp;quot;Non-Electric&amp;quot;)

pp  &amp;lt;- big_epa_cars %&amp;gt;% 
  mutate(fuelType=fct_reorder(fuelType, year)) %&amp;gt;% 
  ggplot(aes(x=fuelType, y =year, fill=fuelType)) + 
  geom_boxplot(varwidth=TRUE) +
  coord_flip() + 
  theme(text = element_text(size=18), 
        plot.title = element_text(size=32), legend.position = &amp;quot;none&amp;quot;)+
  theme(text = element_text(size=15)) +
  labs(x = &amp;quot;Fuel Type&amp;quot;,
       y = &amp;quot;Year&amp;quot;,
       title = &amp;quot;How does prominence of Fuel Types \nchange with the year?&amp;quot;)

pp&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-23-tidytuesday-which-are-the-best-family-cars_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;1152&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In the last couple of years, number of electric car models are increasing but they are still a minority.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;big3 &amp;lt;- big_epa_cars %&amp;gt;% 
  group_by(year, fuelType) %&amp;gt;% 
  mutate(n = n())

big3 %&amp;gt;% 
    ggplot(aes(x=n, y =year, col=fuelType)) +
    geom_point(size=4) +
    theme(legend.position = c(0.9,0.9),
          legend.title= element_blank(), 
          legend.background = element_blank(),
          plot.title = element_text(size=32), 
          text = element_text(size=15)) + 
  coord_flip() +
    labs(x = &amp;quot;Number of Car models&amp;quot;, 
         y = &amp;quot;Year&amp;quot;, 
         title = &amp;quot;How does the Numbers of Electric vs Non Electric cars \nchange by year?&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-23-tidytuesday-which-are-the-best-family-cars_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;1152&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Both Electric and Non Electric car models follows a similar increase in the last 10 years&lt;/p&gt;
&lt;p&gt;Increases in Electric car models in the last years might be a reflection of a general increase in total number of model types&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusions-future-thoughts&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Conclusions / Future thoughts&lt;/h1&gt;
&lt;p&gt;This was a huge dataset. You can answer many other questions such as mileage of different car models, carbon dioxide emissions, fuel savings.&lt;/p&gt;
&lt;p&gt;I have selected some car models which might be a good option if luggage space is a priority for you!&lt;/p&gt;
&lt;p&gt;To see other examples of how people used this dataset follow the &lt;strong&gt;Twitter&lt;/strong&gt; hashtag &lt;a href=&#34;https://twitter.com/hashtag/tidytuesday?lang=en&#34;&gt;#TidyTuesday&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Please share if you have other ideas in the comments below!&lt;/p&gt;
&lt;p&gt;Until next time!&lt;/p&gt;
&lt;p&gt;Serdar&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data Preparation: Web Scraping html tables with rvest</title>
      <link>/r/scrape-tables-rvest/</link>
      <pubDate>Thu, 10 Oct 2019 00:00:00 +0000</pubDate>
      <guid>/r/scrape-tables-rvest/</guid>
      <description>


&lt;div id=&#34;accessing-different-data-sources&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Accessing different data sources&lt;/h2&gt;
&lt;p&gt;Sometimes, the data you need is available on the web. Accessing those will ease your life as a data scientist.&lt;/p&gt;
&lt;p&gt;I want to perform an exploratory data analysis on &lt;strong&gt;2018/19 Season of England Premier league&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Are there changes in team performances during the season timeline?&lt;/li&gt;
&lt;li&gt;Does some teams cluster?&lt;/li&gt;
&lt;li&gt;Which is the earliest week we can predict team’s final positions?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I need the &lt;strong&gt;standings table&lt;/strong&gt; for each week of the season and integrate them in a way that will allow me to plot the graphs that I want.
We will scrap those tables from &lt;a href=&#34;https://www.weltfussball.de/&#34; class=&#34;uri&#34;&gt;https://www.weltfussball.de/&lt;/a&gt;.&lt;img src=&#34;/img/welt.png&#34; alt=&#34;welt&#34; /&gt;&lt;/p&gt;
&lt;p&gt;For example standings table for the Week 1 is at the url:&lt;br /&gt;
&lt;a href=&#34;https://www.weltfussball.de/spielplan/eng-premier-league-2018-2019-spieltag/1&#34; class=&#34;uri&#34;&gt;https://www.weltfussball.de/spielplan/eng-premier-league-2018-2019-spieltag/1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For the consequent weeks only the number at the end changes e.g.&lt;br /&gt;
&lt;a href=&#34;https://www.weltfussball.de/spielplan/eng-premier-league-2018-2019-spieltag/2&#34;&gt;../spielplan/eng-premier-league-2018-2019-spieltag/&lt;strong&gt;2&lt;/strong&gt;&lt;/a&gt; ←&lt;br /&gt;
&lt;a href=&#34;https://www.weltfussball.de/spielplan/eng-premier-league-2018-2019-spieltag/3&#34;&gt;../spielplan/eng-premier-league-2018-2019-spieltag/&lt;strong&gt;3&lt;/strong&gt;&lt;/a&gt; ←&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Pull the necessary packages  

library(rvest)     # xml2
library(tidyverse) # ggplot2, dplyr, tidyr, readr, 
                   # purrr, tibble, stringr, forcats
library(gganimate)
library(RColorBrewer)
library(kableExtra)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Define the remote url
baseUrl &amp;lt;- &amp;quot;https://www.weltfussball.de/&amp;quot;
path &amp;lt;- &amp;quot;spielplan/eng-premier-league-2018-2019-spieltag/&amp;quot;
fileName &amp;lt;- 1
url &amp;lt;- paste0(baseUrl, path, fileName)
url&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;https://www.weltfussball.de/spielplan/eng-premier-league-2018-2019-spieltag/1&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We start by downloading and parsing the file with &lt;strong&gt;read_html()&lt;/strong&gt; function from the rvest package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tables &amp;lt;- read_html(url)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To extract the html table individually you can use &lt;strong&gt;XPath&lt;/strong&gt; syntax which defines parts on XML documents.&lt;/p&gt;
&lt;p&gt;To get the XPath for standings table open the url on google chrome,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;hover the mouse over the table &amp;gt; right click &amp;gt; inspect&lt;/strong&gt;&lt;br /&gt;
# This will open inspector&lt;/li&gt;
&lt;li&gt;Move your mouse a few lines up or down to find the line where whole table is highlighted&lt;/li&gt;
&lt;li&gt;Right click &amp;gt; Copy &amp;gt; Copy full XPath&lt;img src=&#34;/img/weltxpath.png&#34; alt=&#34;weltxpath&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can feed that XPath we copied to html_nodes() function and extract the node which contains the table.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;xpath = &amp;quot;/html/body/div[3]/div[2]/div[4]/div[2]/div[1]/div/div[7]/div/table[1]&amp;quot;
nodes &amp;lt;- html_nodes(tables, xpath = xpath)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At the end, html_table() function will extract us the individual table.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;html_table(nodes)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
##     # Mannschaft              Mannschaft Sp. S. U. N. Tore Dif. Pk.
## 1   1         NA            Liverpool FC   1  1  0  0  4:0    4   3
## 2   2         NA              Chelsea FC   1  1  0  0  3:0    3   3
## 3   3         NA         AFC Bournemouth   1  1  0  0  2:0    2   3
## 4  NA         NA          Crystal Palace   1  1  0  0  2:0    2   3
## 5  NA         NA         Manchester City   1  1  0  0  2:0    2   3
## 6  NA         NA              Watford FC   1  1  0  0  2:0    2   3
## 7   7         NA       Manchester United   1  1  0  0  2:1    1   3
## 8  NA         NA       Tottenham Hotspur   1  1  0  0  2:1    1   3
## 9   9         NA              Everton FC   1  0  1  0  2:2    0   1
## 10 NA         NA Wolverhampton Wanderers   1  0  1  0  2:2    0   1
## 11 11         NA              Burnley FC   1  0  1  0  0:0    0   1
## 12 NA         NA          Southampton FC   1  0  1  0  0:0    0   1
## 13 13         NA          Leicester City   1  0  0  1  1:2   -1   0
## 14 NA         NA        Newcastle United   1  0  0  1  1:2   -1   0
## 15 15         NA              Arsenal FC   1  0  0  1  0:2   -2   0
## 16 NA         NA  Brighton &amp;amp; Hove Albion   1  0  0  1  0:2   -2   0
## 17 NA         NA            Cardiff City   1  0  0  1  0:2   -2   0
## 18 NA         NA               Fulham FC   1  0  0  1  0:2   -2   0
## 19 19         NA       Huddersfield Town   1  0  0  1  0:3   -3   0
## 20 20         NA         West Ham United   1  0  0  1  0:4   -4   0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wonderful, we scraped the standings table for the first week, but we want tables for each 38 week of the season.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You can make this easily by packing what we have done so far in a for loop.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As only the last number in our url link changes, we can code different url addresses as in &lt;code&gt;url[[i]] &amp;lt;- paste0(baseUrl, path, i)&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Create emtpy lists
url &amp;lt;- list()
pages &amp;lt;- list()
nodes &amp;lt;- list()
final &amp;lt;- list()
start &amp;lt;- Sys.time()
# For loop.
# It will connect one by one to 38 different url links predefined 
# by the line starting with url[[i]]
# Collect the information with read_html(), html_nodes() and html_table()
# Finally each table will be converted to a data frame
for(i in 1:38){
url[[i]] &amp;lt;- paste0(baseUrl, path, i)
pages[[i]] &amp;lt;- read_html(url[[i]])
nodes[[i]] &amp;lt;- html_nodes(pages[[i]], xpath = xpath)
final[[i]] &amp;lt;- data.frame(html_table(nodes[[i]]))
}

# By coding start and end times of the whole process 
# I can keep an eye on how fast my code is.
end &amp;lt;- Sys.time()
end-start&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Time difference of 22.62705 secs&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For example, &lt;code&gt;final[[19]]&lt;/code&gt; will give me standings of mid season:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;final[[19]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    X. Mannschaft            Mannschaft.1 Sp. S. U. N.  Tore Dif. Pk.
## 1   1         NA            Liverpool FC  19 16  3  0  43:7   36  51
## 2   2         NA       Tottenham Hotspur  19 15  0  4 42:18   24  45
## 3   3         NA         Manchester City  19 14  2  3 51:15   36  44
## 4   4         NA              Chelsea FC  19 12  4  3 37:16   21  40
## 5   5         NA              Arsenal FC  19 11  5  3 41:25   16  38
## 6   6         NA       Manchester United  19  9  5  5 37:31    6  32
## 7   7         NA          Leicester City  19  8  4  7 24:22    2  28
## 8   8         NA              Everton FC  19  7  6  6 31:29    2  27
## 9   9         NA         West Ham United  19  8  3  8 27:28   -1  27
## 10 10         NA              Watford FC  19  8  3  8 26:27   -1  27
## 11 11         NA Wolverhampton Wanderers  19  7  5  7 20:22   -2  26
## 12 12         NA         AFC Bournemouth  19  8  2  9 27:33   -6  26
## 13 13         NA  Brighton &amp;amp; Hove Albion  19  6  4  9 21:27   -6  22
## 14 14         NA          Crystal Palace  19  5  4 10 17:25   -8  19
## 15 15         NA        Newcastle United  19  4  5 10 14:26  -12  17
## 16 16         NA          Southampton FC  19  3  6 10 20:35  -15  15
## 17 17         NA            Cardiff City  19  4  3 12 18:38  -20  15
## 18 18         NA              Burnley FC  19  3  3 13 17:41  -24  12
## 19 19         NA               Fulham FC  19  2  5 12 17:43  -26  11
## 20 20         NA       Huddersfield Town  19  2  4 13 12:34  -22  10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Don’t mind the NAs in the second column, we will remove them soon.
Now, we have all 38 table in our list &lt;strong&gt;final&lt;/strong&gt;, we can combine them to a new data frame which will contain standings of the whole season.&lt;/p&gt;
&lt;p&gt;To be able to plot e.g. timeline, let’s keep the tidy data principles:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Each observation has its own row.&lt;/li&gt;
&lt;li&gt;Each variable has its own column.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since we have same column names in each table, we can use &lt;strong&gt;rbind&lt;/strong&gt; function to add rows of each table to the bottom of the first one. How to do that? We can’t use lapply() function here. It will not combine elements in a list. We can use &lt;strong&gt;do.call() function to perform the rbind() operation and combine all data frames we have&lt;/strong&gt;*.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;uk18 &amp;lt;-  do.call(&amp;quot;rbind&amp;quot;, final)
dim(uk18)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 760  10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(uk18)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   X. Mannschaft    Mannschaft.1 Sp. S. U. N. Tore Dif. Pk.
## 1  1         NA    Liverpool FC   1  1  0  0  4:0    4   3
## 2  2         NA      Chelsea FC   1  1  0  0  3:0    3   3
## 3  3         NA AFC Bournemouth   1  1  0  0  2:0    2   3
## 4 NA         NA  Crystal Palace   1  1  0  0  2:0    2   3
## 5 NA         NA Manchester City   1  1  0  0  2:0    2   3
## 6 NA         NA      Watford FC   1  1  0  0  2:0    2   3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Column names/shorcuts were in German, let’s replace them with the English words.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Correct final table
uk18 &amp;lt;- uk18  %&amp;gt;% select(3:10)
new_names &amp;lt;- c(&amp;quot;team&amp;quot;, &amp;quot;week&amp;quot;, &amp;quot;won&amp;quot;, &amp;quot;drawn&amp;quot;, &amp;quot;lost&amp;quot;, &amp;quot;goals&amp;quot;, 
               &amp;quot;difference&amp;quot;, &amp;quot;points&amp;quot;)
colnames(uk18) &amp;lt;- new_names&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Goals variable is contains two different data separated with “:”. &lt;code&gt;E.g. (4:0)&lt;/code&gt;. Those represent goals scored:goals scored against. Let’s split goals column into two by &lt;strong&gt;separate() function from tidyr&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;uk18 &amp;lt;- uk18 %&amp;gt;% separate(goals, c(&amp;quot;scored&amp;quot;, &amp;quot;against&amp;quot;), sep=&amp;quot;\\:&amp;quot;)
head(uk18)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##              team week won drawn lost scored against difference points
## 1    Liverpool FC    1   1     0    0      4       0          4      3
## 2      Chelsea FC    1   1     0    0      3       0          3      3
## 3 AFC Bournemouth    1   1     0    0      2       0          2      3
## 4  Crystal Palace    1   1     0    0      2       0          2      3
## 5 Manchester City    1   1     0    0      2       0          2      3
## 6      Watford FC    1   1     0    0      2       0          2      3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;I want to order my legend with the same order of teams final positions&lt;/strong&gt;. Let’s filter for the last week of the season and arrange them in descending order. I will assign this list to the factor levels of the team variable.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Extract team names in the order as the season end
uk18_filt &amp;lt;- uk18 %&amp;gt;% 
  filter(week == 38) %&amp;gt;%
  arrange(desc(points))
knitr::kable(uk18_filt)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
team
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
week
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
won
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
drawn
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
lost
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
scored
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
against
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
difference
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
points
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Manchester City
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
32
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
95
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
23
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
72
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
98
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Liverpool FC
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
30
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
89
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
22
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
67
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
97
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Chelsea FC
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
21
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
63
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
39
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
24
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
72
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Tottenham Hotspur
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
23
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
67
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
39
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
28
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
71
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Arsenal FC
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
21
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
73
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
51
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
70
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Manchester United
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
65
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
54
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
66
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Wolverhampton Wanderers
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
47
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
46
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
57
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Everton FC
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
54
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
46
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
54
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Leicester City
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
51
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
48
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
52
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
West Ham United
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
52
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
55
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
52
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Watford FC
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
52
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
59
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
50
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Crystal Palace
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
17
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
51
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
53
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
49
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Newcastle United
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
17
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
42
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
48
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
45
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
AFC Bournemouth
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
56
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
70
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-14
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
45
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Burnley FC
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
20
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
45
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
68
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-23
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Southampton FC
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
17
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
45
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
65
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-20
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
39
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Brighton &amp;amp; Hove Albion
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
20
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
35
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
60
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-25
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
36
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Cardiff City
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
24
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
34
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
69
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-35
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
34
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Fulham FC
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
34
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
81
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-47
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Huddersfield Town
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
28
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
22
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
76
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-54
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;finallevels &amp;lt;- as.character(uk18_filt$team)
uk18$team &amp;lt;- factor(uk18$team, levels = finallevels)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also create a color palette which fits to your needs.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# We need a color palette with 20 colors
colorCount &amp;lt;- length(unique(uk18$team))
# colorRampPalette creatas a getPalette() function
# This can modify an existing palette to include as many colors we want
getPalette &amp;lt;- colorRampPalette(brewer.pal(9, &amp;quot;Set1&amp;quot;))
getPalette(colorCount)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;#E41A1C&amp;quot; &amp;quot;#9B445D&amp;quot; &amp;quot;#526E9F&amp;quot; &amp;quot;#3C8A9B&amp;quot; &amp;quot;#469F6C&amp;quot; &amp;quot;#54A453&amp;quot; &amp;quot;#747B78&amp;quot;
##  [8] &amp;quot;#94539E&amp;quot; &amp;quot;#BD6066&amp;quot; &amp;quot;#E97422&amp;quot; &amp;quot;#FF990A&amp;quot; &amp;quot;#FFCF20&amp;quot; &amp;quot;#FAF632&amp;quot; &amp;quot;#D4AE2D&amp;quot;
## [15] &amp;quot;#AF6729&amp;quot; &amp;quot;#BF6357&amp;quot; &amp;quot;#E17597&amp;quot; &amp;quot;#E884B9&amp;quot; &amp;quot;#C08EA9&amp;quot; &amp;quot;#999999&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Plot season timeline using the palette we just created
uk &amp;lt;- ggplot(uk18, aes(x=week, y=points, col=team)) +   
  geom_point(size=3) + 
  theme(text = element_text(size=15)) + 
  scale_color_manual(values = getPalette(colorCount))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s plot the regression lines&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Plot season timeline
uk &amp;lt;- ggplot(uk18, aes(x=week, y=points, col=team)) + 
  geom_smooth(se=TRUE) + 
  theme(text = element_text(size=15)) + 
  scale_color_manual(values = getPalette(colorCount))

uk&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using method = &amp;#39;loess&amp;#39; and formula &amp;#39;y ~ x&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-10-data-preparation-web-scraping-data-tables-with-rvest_files/figure-html/Season%20timeline%20linear%20model-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;uk_facet &amp;lt;- ggplot(uk18, aes(x=week, y=points, col=team)) + 
  geom_smooth(se=FALSE) + 
  theme(text = element_text(size=10)) + 
  scale_color_manual(values = getPalette(colorCount)) + 
  facet_wrap(ncol = 4, team~.)

uk_facet&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using method = &amp;#39;loess&amp;#39; and formula &amp;#39;y ~ x&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-10-data-preparation-web-scraping-data-tables-with-rvest_files/figure-html/Season%20timeline%20linear%20model-2.png&#34; width=&#34;672&#34; /&gt;
Some insights from the plots:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;I see three clusters here. Two teams (Man. City and Liverpool) competed head to head for the championship and next three teams (Chelsea, Tottenham and Arsenal) for the 3rd position.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;We can predict 4 out of 5 teams which will take first 5 place at the end of the season early as week 10.&lt;/li&gt;
&lt;li&gt;Manchester United showed peak performance mid season, Everton have improved performances while Tottenham slowed down (which costed them 3rd position) in the second part of the season.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I can plot points against goal differences in the same plot. Same clusters pop up here as well.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;uk &amp;lt;- ggplot(uk18, aes(x=difference, y=points, col=team)) + 
  geom_point(size=2) + 
  scale_color_manual(values = getPalette(colorCount)) + 
  theme(text = element_text(size=15))
uk&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-10-data-preparation-web-scraping-data-tables-with-rvest_files/figure-html/points%20vs%20goal%20differences-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let’s visualize this in a small animation. You can create an animated plot of the teams progress during the season. Gganimate does good job.`&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Add a shadow tail
# anim + shadow_wake(wake_length = 0.3, alpha = FALSE)
 
anim &amp;lt;- uk + 
             transition_time(week) + 
             labs(title = &amp;quot;week: {round(frame_time,0)}&amp;quot;) + 
             shadow_wake(wake_length = 0.1, alpha = 0.5)

fullanimation &amp;lt;- animate(anim, fps= 7, nframes=100, 
                         height=500, width=800, res=0.8)

fullanimation&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-10-data-preparation-web-scraping-data-tables-with-rvest_files/figure-html/gganimate-1.gif&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusions-future-thoughts&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Conclusions / Future Thoughts&lt;/h1&gt;
&lt;p&gt;One of the most important steps to answer a research question is gathering and pre-processing data that fits best for the planned analysis.&lt;/p&gt;
&lt;p&gt;Some of the questions we tackled were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to find the &lt;strong&gt;XPath&lt;/strong&gt; for an &lt;strong&gt;html table&lt;/strong&gt; in a website?&lt;/li&gt;
&lt;li&gt;How to &lt;strong&gt;combine data frames&lt;/strong&gt; from &lt;strong&gt;a list&lt;/strong&gt;?&lt;/li&gt;
&lt;li&gt;How to &lt;strong&gt;split columns&lt;/strong&gt; containing more than one variable?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The earliest time, we can predict top teams final positions was around 10th. We can collect data from previous years or compare other countries leagues to check if we can generalize this finding.&lt;/p&gt;
&lt;p&gt;What else we can ask? For example, we can connect performance changes to new transfers. Or whether changing coaches benefited any team.&lt;/p&gt;
&lt;p&gt;Please share if you have other ideas in the comments below!&lt;/p&gt;
&lt;p&gt;Until next time!&lt;/p&gt;
&lt;p&gt;Serdar&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
